{"version":3,"sources":["components/CommonStyles.js","components/CustomButton.js","components/Title.js","components/Setup.js","components/Websocket.js","Stores/DatabaseParamStore.js","components/Login.js","components/Calibration.js","components/SelectMode.js","components/TestCalibration.js","components/Sensor.js","components/App.js","index.js"],"names":["color","padding","styles","container","position","button","width","height","CustomButton","props","state","style","onClick","this","bind","children","React","Component","Radium","titleContainer","display","backgroundColor","Title","logout","RadiumLink","Link","Setup","to","siteURL","localhostURL","loginURL","signupURL","socket","io","reconnection","reconnectionDelay","reconnectionAttempts","Infinity","once","subscribe","canBroadcast","sensorDataCallback","readAllConfigCallback","console","log","on","logTime","handleSensorData","handleAllConfigs","callback","emit","text","data","payload","configName","cutoffVals","Array","fill","configs","listeners","Websocket","requestForConfigs","onAllConfigsLoaded","listener","push","filter","s","chipsetId","sensorIdx","cutoffVal","i","length","name","json","save","jsonObject","chipsetData","j","toString","dbPayload","JSON","stringify","saveUserConfig","updateUserConfig","saveParams","flexDirection","buttons","marginTop","inputContainer","input","resultLabel","Login","username","password","message","loginUrl","context","onChange","usernameChanged","type","placeholder","value","passwordChanged","onClickLogin","onClickSignUp","e","request","Request","method","headers","body","fetch","then","response","status","result","onLogin","setState","config","Object","keys","error","debug","catch","defaultConfig","DatabaseParamStore","getDefaultConfig","v","target","Calibration","modeContainer","SelectMode","TestCalibration","marginBottom","Sensor","nextPath","getNextPath","path","App","isConnected","receiveVal","isLoggedIn","chipsetCollectionRef","createRef","calibrationPages","getSensorCalibrationPages","loginPage","Fragment","hasLoggedIn","setupPage","calibrationPage","testCalPage","selectModePage","pathPrefix","pages","route","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.459e5823.chunk.js","sourcesContent":["const color = {\r\n    tealBack: '#849099',\r\n    white: '#FFFFFF',\r\n    black: '#000000'\r\n};\r\n\r\nconst fontSize = {\r\n    extraSmall: '8px',\r\n    verySmall: '12px',\r\n    small: '16px',\r\n    big: '20px',\r\n    veryBig: '24px',\r\n    extraBig: '28px',\r\n    huge: '32px',\r\n    veryHuge: '36px',\r\n    extraHuge: '40px',\r\n    massive: '44px',\r\n    veryMassive: '48px',\r\n    extraMassive: '52px',\r\n    enormous: '56px',\r\n    veryEnormous: '60px',\r\n    extraEnormous: '64px',\r\n    insane: '68px',\r\n    veryInstane: '72px',\r\n    extraInsane: '76px',\r\n    gaia: '80px',\r\n    veryGaia: '84px',\r\n    extraGaia: '88px'\r\n};\r\n\r\nconst padding = {\r\n    tiny: '2px',\r\n    // Increments of 4\r\n    extraSmall: '4px',\r\n    verySmall: '8px',\r\n    small: '12px',\r\n    // Incremenets of 8\r\n    big : '20px',\r\n    veryBig : '28px',\r\n    extraBig : '36px',\r\n    // Increments of 12\r\n    huge: '52px',\r\n    veryHuge: '64px',\r\n    extraHuge: '76px',\r\n    // Incremenets of 16\r\n    massive: '92px',\r\n    veryMassive: '108px',\r\n    extraMassive: '124px',\r\n    // Increment of 20\r\n    enourmous: '100px',\r\n    veryEnormous: '120px',\r\n    extraEnormous: '140px',\r\n    // Increment of 40\r\n    insane: '160px',\r\n    veryInsane: '200px',\r\n    extraInsane: '240px'\r\n\r\n};\r\n\r\nconst fontFamily = {\r\n    bebas: 'bebas_neueregular',\r\n    bilbo: 'bilboregular',\r\n    opensanslight: 'open_sanslight',\r\n    opensansregular: 'open_sansregular',\r\n    thermal: 'thermalregular'\r\n};\r\n\r\nconst boxShadow = {\r\n    dark: '0px 2px 4px ' + color.black,\r\n    darkButton: '0px 0px 3px' + color.black,\r\n    darkButtonBig: '0px 1px 5px' + color.black\r\n\r\n}\r\n\r\nexport { color, fontSize, fontFamily, padding, boxShadow };","// Name: CustomButton.js\r\n// Author: Amay Kataria. \r\n// Date: 06/28/2021\r\n// Description: Custom Button component to give it our own style.\r\n\r\nimport React from 'react'\r\nimport Radium from 'radium'\r\n\r\n\r\nconst styles = {\r\n  container: {\r\n    position: 'relative',\r\n  },\r\n\r\n  button: {\r\n    width: '125px',\r\n    height: '35px'\r\n  }\r\n};\r\n\r\nclass CustomButton extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={styles.container}>\r\n        <button onClick={this.props.onClick ? this.onClick.bind(this) : () => {}}style={styles.button}>\r\n            {this.props.children}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  onClick() {\r\n    this.props.onClick(); \r\n  }\r\n}\r\n\r\nexport default Radium(CustomButton);","// Name: Title.js\r\n// Author: Amay Kataria. \r\n// Date: 06/28/2021\r\n// Description: Title component for the app. \r\n\r\nimport React from 'react'\r\nimport Radium from 'radium'\r\n\r\nimport { color, padding } from './CommonStyles';\r\nimport CustomButton from './CustomButton';\r\n\r\nconst styles = {\r\n  container: {\r\n    position: 'relative'\r\n  },\r\n\r\n  titleContainer: {\r\n    display: 'flex',\r\n    backgroundColor: color.tealBack,\r\n    color: color.black,\r\n    padding: padding.extraSmall\r\n  }\r\n};\r\n\r\nclass Title extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n    };\r\n  }\r\n\r\n  // As soon as I click on Logout, I step out of the app. \r\n  render() {\r\n    return (\r\n      <div style={styles.container}>\r\n        <div style={styles.titleContainer}>\r\n            EMBROIDERED TOUCH\r\n        </div>\r\n        <button onClick={this.props.logout}>Logout</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Radium(Title);","// Name: Setup.js\r\n// Author: Amay Kataria. \r\n// Date: 06/28/2021\r\n// Description: Bluetooth setup screen. \r\n\r\nimport React from 'react'\r\nimport Radium from 'radium'\r\nimport { color, padding } from './CommonStyles';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport CustomButton from './CustomButton';\r\n\r\nconst RadiumLink = Radium(Link);\r\n\r\nconst styles = {\r\n  container: {\r\n    position: 'relative',\r\n    color: color.white,\r\n    padding: padding.big\r\n  }\r\n};\r\n\r\nclass Setup extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={styles.container}>\r\n        <div>Initial Set-Up</div>\r\n        <CustomButton>\r\n          <RadiumLink to='/calibration'>PAIR</RadiumLink>\r\n        </CustomButton>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Radium(Setup);","// Name: Websocket.js\r\n// Author: Amay Kataria.\r\n// Date: 06/15/2021\r\n// Description: Class responsible for communication with the webserver. We use websockets\r\n// technology for this. Here we have the websocket client, which communicates with backend\r\n// server over websockets.\r\n\r\nimport io  from 'socket.io-client'\r\n\r\nconst localhostURL = \"http://localhost:5000\";\r\nconst herokuURL = \"https://fabric-backend.herokuapp.com\";\r\n\r\nclass Websocket {\r\n    constructor() {\r\n        this.siteURL = localhostURL + '/app'; \r\n        this.loginURL = localhostURL + '/login';\r\n        this.signupURL = localhostURL + '/signup';\r\n\r\n        this.socket = io(this.siteURL, {\r\n            reconnection: true,\r\n            reconnectionDelay: 500,\r\n            reconnectionAttempts: Infinity\r\n        });\r\n\r\n        this.socket.once('connect', this.subscribe.bind(this));\r\n        this.canBroadcast = false; \r\n\r\n        // ------------ Callbacks fired on response from sockets ------------------------ //\r\n        this.sensorDataCallback = ''; // Fired when the client receives data from the sensors.\r\n        this.readAllConfigCallback = ''; // Fired when the client all configs from the database. \r\n    }\r\n\r\n    subscribe() {\r\n        console.log('Connected');\r\n\r\n        // Subscribe to incoming events from the webserver here. \r\n        this.socket.on('time', this.logTime.bind(this));\r\n        this.socket.on('receiveSensorData', this.handleSensorData.bind(this));\r\n        this.socket.on('receiveAllConfigs', this.handleAllConfigs.bind(this));\r\n    }\r\n\r\n    // ----------------------- SENSOR DATA BROADCAST--------------------- //\r\n    updateRoom(callback) {\r\n        this.socket.emit('room');\r\n        this.canBroadcast = !this.canBroadcast; \r\n        this.sensorDataCallback = callback; \r\n    }\r\n\r\n    broadcastText(text) {\r\n        if (this.canBroadcast) {\r\n            this.socket.emit('sensorData', text); \r\n        }\r\n    }\r\n\r\n    // Fire the sensor data callback registered before. \r\n    handleSensorData(data) {\r\n        this.sensorDataCallback(data);\r\n    }\r\n\r\n    // ----------------------- DATABASE CALLS --------------------- //\r\n    saveUserConfig(payload) {\r\n        this.socket.emit('saveUserConfig', payload); \r\n    }\r\n\r\n    updateUserConfig(payload) {\r\n        this.socket.emit('updateUserConfig', payload);\r\n    }\r\n\r\n    deleteUserConfig(configName) {\r\n        this.socket.emit('deleteUserConfig', configName);\r\n    }\r\n\r\n    // ------------------ LOAD ALL USER CONFIGS ------------------\r\n    requestForConfigs(callback) {\r\n        this.readAllConfigCallback = callback;\r\n        this.socket.emit('requestForConfigs');\r\n    }\r\n\r\n    // Fire the readAllConfigCallback registered before. \r\n    handleAllConfigs(data) {\r\n        this.readAllConfigCallback(data); \r\n    }\r\n\r\n    // -------------------- DON'T CHANGE THESE -------------------    \r\n    disconnect() {\r\n        console.log('Socket Server Disconnected.');\r\n    }\r\n\r\n    logTime(data) {\r\n        //console.log('Socket Connection Alive: ' + data);\r\n    }\r\n\r\n}\r\n\r\n// New keyword calls the constructor for the component.\r\nexport default new Websocket();","// Name: DatabaseParamStore.js\r\n// Author: Amay Kataria. \r\n// Date: 06/22/2021\r\n// Description: This data store is responsible to hold parameters, which will be saved onto the database.  \r\n\r\nimport Websocket from \"../components/Websocket\";\r\n\r\nclass DatabaseParamStore {\r\n    constructor() {\r\n        // Cut off values for the entire system.\r\n        // This is the current state. \r\n        // Initial cutoff values filled.\r\n        this.cutoffVals = [{\r\n            'co': new Array(12).fill(150), // For chipset 0\r\n        }, {\r\n            'co': new Array(12).fill(150) // For chipset 1\r\n        }]; \r\n\r\n        // All use the user configs are loaded and stored in this. \r\n        // Any save or update should also save and update this.         \r\n        // [NOTE] We should do this based on db success but I'm not plumbing that code for now. \r\n        // Key is configName, Value is json\r\n        this.configs = {}; \r\n\r\n        // All the listeners subscribed to this database.\r\n        this.listeners = []; \r\n\r\n        // Fire an async db call to load all configs.\r\n        Websocket.requestForConfigs(this.onAllConfigsLoaded.bind(this)); \r\n    }\r\n\r\n    subscribe(listener) {\r\n        this.listeners.push(listener); \r\n        const removeListener = () => {\r\n            this.listeners = this.listeners.filter((s) => listener !== s);\r\n        };\r\n\r\n        return removeListener;\r\n    }\r\n\r\n    // Update the store. \r\n    setState(chipsetId, sensorIdx, cutoffVal) {\r\n        // console.log('ChipsetId: ' + chipsetId + ', sensorIdx: ' + sensorIdx + ', cutoffVal: ' + cutoffVal);\r\n        // Update chipset data. \r\n        this.cutoffVals[chipsetId]['co'][sensorIdx] = cutoffVal; \r\n    }\r\n\r\n    onAllConfigsLoaded(data) {\r\n        let configs = data; \r\n        for (let i = 0; i < configs.length; i++) {\r\n            let name = configs[i]['name'];\r\n            let json = configs[i]['config'];\r\n            this.configs[name] = json; \r\n        }\r\n\r\n        console.log(this.configs);\r\n\r\n        // Intimate all the subscribers of the updates.\r\n        for (let i = 0; i < this.listeners.length; i++) {\r\n            this.listeners[i](this.configs); \r\n        }\r\n    }\r\n\r\n    saveParams(configName, save = true) {\r\n        // Create the payload with the config name and sensor values. \r\n        // Both the chip params will be stored to the database. \r\n        // [name - text, config - json]\r\n        // Database payload. \r\n\r\n        // JSON object, which gets stringified and goes to the database.\r\n        let jsonObject = {}; \r\n        for (let i = 0; i < 2; i++) { // Num chips = 2\r\n            let chipsetData = {}; \r\n            chipsetData['cutoff'] = {}; \r\n            for (let j = 0; j < 12; j++) { // Num sensors = 12\r\n                let cutoffVals = this.cutoffVals[i]['co']; \r\n                chipsetData['cutoff'][j] = cutoffVals[j];  \r\n            }\r\n\r\n            jsonObject[i.toString()] = chipsetData; \r\n        }\r\n\r\n        let dbPayload = {\r\n            'name' : configName,\r\n            'config' : JSON.stringify(jsonObject)\r\n        };\r\n\r\n        if (save) {\r\n            Websocket.saveUserConfig(dbPayload);\r\n            // Update config state with the new payload. \r\n            this.configs[configName] = jsonObject;\r\n        } else {\r\n            Websocket.updateUserConfig(dbPayload);\r\n            // Replace the old config here with the new config.\r\n            this.configs[configName] = jsonObject;\r\n        }\r\n\r\n    }\r\n\r\n    updateParams(configName) {\r\n        this.saveParams(configName, false); \r\n    }\r\n\r\n    getCutoffValue(configName, chipsetId, sensorIdx) {\r\n        if (this.configs[configName]) {\r\n            let v = this.configs[configName][chipsetId]['cutoff'][sensorIdx];\r\n            return v;\r\n        } else {\r\n            // Return default values when there is no config name.\r\n            // This happens in the beginning.\r\n            return this.cutoffVals[chipsetId]['co'][sensorIdx];\r\n        }\r\n    }\r\n\r\n    getDefaultConfig() {\r\n        let jsonObject = {}; \r\n        for (let i = 0; i < 2; i++) { // Num chips = 2\r\n            let chipsetData = {}; \r\n            chipsetData['cutoff'] = {}; \r\n            for (let j = 0; j < 12; j++) { // Num sensors = 12\r\n                let cutoffVals = this.cutoffVals[i]['co']; \r\n                chipsetData['cutoff'][j] = cutoffVals[j];  \r\n            }\r\n\r\n            jsonObject[i.toString()] = chipsetData; \r\n        }\r\n\r\n        return jsonObject; \r\n    }\r\n}\r\n\r\nexport default new DatabaseParamStore(); ","// Name: Login.js\r\n// Author: Amay Kataria. \r\n// Date: 06/28/2021\r\n// Description: Component that handles everything related to logging into the application. \r\n\r\nimport React from 'react'\r\nimport Radium from 'radium'\r\nimport { color, padding } from './CommonStyles';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport DatabaseParamStore from '../Stores/DatabaseParamStore';\r\nimport CustomButton from './CustomButton';\r\nimport Websocket from './Websocket';\r\nconst RadiumLink = Radium(Link);\r\n\r\nconst styles = {\r\n  container: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    position: 'relative',\r\n    color: color.white,\r\n    padding: padding.big\r\n  },\r\n\r\n  buttons: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    marginTop: padding.small\r\n  },\r\n\r\n  inputContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    marginTop: padding.small\r\n  },\r\n\r\n  input: {\r\n    width: '100px',\r\n    marginTop: padding.extraSmall\r\n  },\r\n\r\n  resultLabel: {\r\n    marginTop: padding.extraSmall\r\n  }\r\n};\r\n\r\nclass Login extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      username: '',\r\n      password: '',\r\n      message: 'Message'\r\n    };\r\n\r\n    this.loginUrl = Websocket.loginURL; \r\n    this.signupURL = Websocket.signupURL;\r\n    console.log(this.context);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={styles.container}>\r\n        <div>LOGIN</div>\r\n        <div style={styles.input}>\r\n          <input style={styles.input} onChange={this.usernameChanged.bind(this)} type=\"text\" placeholder=\"username..\" value={this.state.username}></input>\r\n          <input style={styles.input} onChange={this.passwordChanged.bind(this)} type=\"password\" placeholder=\"password..\" value={this.state.password}></input>\r\n        </div>\r\n        <div style={styles.buttons}>\r\n          <CustomButton onClick={this.onClickLogin.bind(this)}>\r\n              Sign In\r\n          </CustomButton>\r\n          <CustomButton onClick={this.onClickSignUp.bind(this)}>\r\n            Create Account\r\n          </CustomButton>\r\n        </div>\r\n        <div style={styles.resultLabel}>\r\n          {this.state.message}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  onClickLogin(e) {\r\n    // Make a HTTP request. \r\n    const request = new Request(this.loginUrl, { method: 'POST', headers: {'Content-Type': 'application/json'}, \r\n      body: JSON.stringify({ username: this.state.username, password: this.state.password}) });    \r\n\r\n    fetch(request).then(response => {\r\n        if (response.status === 200) {\r\n            response.json().then(data => {\r\n              let result = data['result'];\r\n              if (result === 'user_not_found') {\r\n                this.props.onLogin(false); // Send back a token to decide if we should move forward. \r\n                this.setState({\r\n                  message: 'Account not found'\r\n                });\r\n              } else if (result === 'user_found') {\r\n                let config = data['config'];\r\n                console.log('Read config: ' + Object.keys(config));\r\n                // Populate the store with this config. \r\n                this.props.onLogin(true); // Send back a token to decide if we should move forward.\r\n                this.setState({\r\n                  message: 'Account found'\r\n                });\r\n              }\r\n            });\r\n        } else {\r\n          console.error('Something wrong');\r\n        }\r\n      }).then(response => {\r\n          console.debug(response);\r\n      }).catch(error => {\r\n          console.error(error);\r\n      });\r\n    }\r\n\r\n    onClickSignUp(e) {\r\n      // Make a post request with all these in a json\r\n      let username = this.state.username;\r\n      let password = this.state.password;\r\n      let defaultConfig = DatabaseParamStore.getDefaultConfig(); \r\n\r\n      console.log(defaultConfig);\r\n      \r\n      // Make a HTTP request. \r\n      const request = new Request(this.signupURL, { method: 'POST', headers: {'Content-Type': 'application/json'}, \r\n        body: JSON.stringify({ username: username, password: password, config: defaultConfig } ) });    \r\n    \r\n      fetch(request).then(response => {\r\n        if (response.status === 200) {\r\n            response.json().then(data => {\r\n              let result = data['result'];\r\n              if (result === 'user_exists') {\r\n                this.setState({\r\n                  message: 'User Exists'\r\n                });\r\n              } else if (result === 'new_user') {\r\n                this.setState({\r\n                  message: 'New User Created'\r\n                });\r\n              }\r\n            });\r\n        } else {\r\n          console.error('Something wrong');\r\n        }\r\n      }).then(response => {\r\n          console.debug(response);\r\n      }).catch(error => {\r\n          console.error(error);\r\n      });\r\n    }\r\n\r\n    usernameChanged(e) {\r\n      let v = e.target.value; \r\n      this.setState({\r\n        username: v\r\n      });\r\n    }\r\n\r\n    passwordChanged(e) {\r\n      let v = e.target.value; \r\n      this.setState({\r\n        password: v\r\n      });\r\n    }\r\n}\r\n\r\nexport default Radium(Login);","// Name: Calibration.js\r\n// Author: Amay Kataria. \r\n// Date: 06/28/2021\r\n// Description: Component that triggers calibration routine for the sensors. \r\n\r\nimport React from 'react'\r\nimport Radium from 'radium'\r\nimport { color, padding } from './CommonStyles';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport CustomButton from './CustomButton';\r\nconst RadiumLink = Radium(Link);\r\n\r\nconst styles = {\r\n  container: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    position: 'relative',\r\n    color: color.white,\r\n    padding: padding.big\r\n  }\r\n};\r\n\r\nclass Calibration extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={styles.container}>\r\n        CALIBRATION\r\n        <CustomButton>\r\n          <RadiumLink to=\"/l-0\">CALIBRATE</RadiumLink>\r\n        </CustomButton>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Radium(Calibration);","// Name: SelectMode.js\r\n// Author: Amay Kataria. \r\n// Date: 06/28/2021\r\n// Description: Component that allows one to switch between multiple modes. \r\n\r\nimport React from 'react'\r\nimport Radium from 'radium'\r\nimport { color } from './CommonStyles';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport CustomButton from './CustomButton';\r\nconst RadiumLink = Radium(Link);\r\n\r\nconst styles = {\r\n  container: {\r\n    position: 'relative',\r\n    color: color.white\r\n  },\r\n\r\n  modeContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'column'\r\n  }\r\n};\r\n\r\nclass SelectMode extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={styles.container}>\r\n        <div>MODE</div>\r\n        <div style={styles.modeContainer}>\r\n          <CustomButton>\r\n            <RadiumLink>CONNECTION</RadiumLink>\r\n          </CustomButton>\r\n          <CustomButton>\r\n            <RadiumLink>SOLO</RadiumLink>\r\n          </CustomButton>\r\n          <CustomButton>\r\n            <RadiumLink to=\"/testcal\">SETUP</RadiumLink>\r\n          </CustomButton>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Radium(SelectMode);","// Name: Test Calibration.js\r\n// Author: Amay Kataria. \r\n// Date: 06/28/2021\r\n// Description: Component that renders the grid and makes it available to be tested. \r\n\r\nimport React from 'react'\r\nimport Radium from 'radium'\r\nimport { color } from './CommonStyles';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport CustomButton from './CustomButton';\r\nconst RadiumLink = Radium(Link);\r\n\r\nconst styles = {\r\n  container: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    position: 'relative',\r\n    color: color.white\r\n  }\r\n};\r\n\r\nclass TestCalibration extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n    };\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={styles.container}>\r\n        <div>\r\n          Testing Calibration\r\n        </div>\r\n        <CustomButton>\r\n          <RadiumLink to=\"/selectmode\">SAVE</RadiumLink>\r\n        </CustomButton>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Radium(TestCalibration);","// Name: Sensor.js\r\n// Author: Amay Kataria. \r\n// Date: 06/21/2021\r\n// Description: Sensor component that references all the attributes like sensor values, calibration parameters,\r\n// audio outputs, etcs. \r\n\r\nimport React from 'react'\r\nimport Radium from 'radium'\r\nimport { color } from './CommonStyles';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport CustomButton from './CustomButton';\r\nconst RadiumLink = Radium(Link);\r\n\r\n// import DatabaseParamStore from '../Stores/DatabaseParamStore';\r\n\r\nconst styles = {\r\n  container: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    position: 'relative',\r\n    color: color.white\r\n  },\r\n\r\n  input: {\r\n      width: '40px',\r\n      height: '20px',\r\n      marginBottom: '10px',\r\n      marginTop: '5px'\r\n  }\r\n};\r\n\r\nclass Sensor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n        // cutoffVal: DatabaseParamStore.getCutoffValue(this.props.configName, this.props.chipsetId, this.props.sensorIdx)\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let nextPath = this.getNextPath(); \r\n    return (\r\n      <div style={styles.container}>\r\n        Chipset {this.props.chipsetId}\r\n        <br />\r\n        Sensor {this.props.sensorIdx}\r\n        <CustomButton>\r\n          <RadiumLink to={nextPath}>NEXT</RadiumLink>\r\n        </CustomButton>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getNextPath() {\r\n    let path = ''; \r\n    let sensorIdx = this.props.sensorIdx < 11 ? this.props.sensorIdx : 0;\r\n    if (this.props.chipsetId === 0 && this.props.sensorIdx < 11) {\r\n      sensorIdx = sensorIdx + 1; \r\n      path = '/l-' + sensorIdx; \r\n      console.log(path);\r\n    } else {\r\n      sensorIdx = sensorIdx + 1; \r\n      path = '/r-' + sensorIdx;\r\n      console.log(path);\r\n    }\r\n\r\n    if (this.props.chipsetId === 1 && this.props.sensorIdx === 11) {\r\n      path = '/testcal'\r\n    }\r\n\r\n    return path; \r\n  }\r\n}\r\n\r\nexport default Radium(Sensor);\r\n\r\n// cutoffChange(e) {\r\n//   let v = e.target.value; \r\n//   this.setState({\r\n//       cutoffVal: Number(v)\r\n//   });\r\n\r\n//   DatabaseParamStore.setState(this.props.chipsetId, this.props.sensorIdx, v);\r\n// }\r\n\r\n// shouldComponentUpdate(nextProps, nextState) {\r\n//     // // Be careful, no state changes will happen.\r\n//     // if (this.props.fVal !== nextProps.fVal || \r\n//     //       this.props.bVal !== nextProps.bVal || \r\n//     //         this.props.configName !== nextProps.configName ||\r\n//     //             this.state.cutoffVal !== nextState.cutoffVal) {\r\n        \r\n//     //     // Config has changed, so update the cut off value.\r\n//     //     if (this.props.configName !== nextProps.configName) {\r\n//     //       let newVal = DatabaseParamStore.getCutoffValue(nextProps.configName, this.props.chipsetId, this.props.sensorIdx); \r\n//     //       this.setState({\r\n//     //         cutoffVal : newVal\r\n//     //       });\r\n//     //     }\r\n//     //     return true; \r\n//     // } else {\r\n//     //     return false; \r\n//     // }\r\n// }\r\n\r\n\r\n// <div>\r\n// <span>{'Sensor Idx '}</span>{this.props.sensoridx}<span>{', Base Val: '}</span>{this.props.bVal}<span>{', Filtered Val: '}</span>{this.props.fVal}\r\n// </div>\r\n// <span>{'Cutoff Value: '}</span><input style={styles.input} onChange={this.cutoffChange.bind(this)} type=\"number\" value={this.state.cutoffVal}></input>","// Name: App.js\r\n// Author: Amay Kataria. \r\n// Date: 06/15/2021\r\n// Description: Root class, which is the entry\r\n\r\nimport React from 'react'\r\nimport Radium from 'radium'\r\nimport { Redirect, BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\n\r\nimport Title from './Title.js'\r\nimport Setup from './Setup.js'\r\nimport Login from './Login.js'\r\nimport Calibration from './Calibration.js'\r\nimport SelectMode from './SelectMode.js'\r\nimport TestCalibration from './TestCalibration.js'\r\nimport Sensor from './Sensor.js'\r\n\r\nimport { color, padding } from './CommonStyles.js'\r\nimport Websocket from './Websocket.js'\r\n\r\nconst styles = {\r\n  container: {\r\n    position: 'relative',\r\n    backgroundColor: color.black, \r\n    padding: padding.small\r\n  }\r\n};\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      isConnected: false,\r\n      receiveVal: 'Receive Text',\r\n      isLoggedIn: false\r\n    };\r\n\r\n    this.chipsetCollectionRef = React.createRef(); \r\n  }\r\n\r\n  render() {\r\n    let calibrationPages = this.getSensorCalibrationPages(); \r\n\r\n    //Redirect the page if there is no user login. \r\n    // function loginPage (routerProps) {\r\n    //   return <React.Fragment><Title /><Login {...routerProps} onLogin={this.hasLoggedIn.bind(this)}/></React.Fragment>\r\n    // } \r\n    let loginPage = this.state.isLoggedIn ? <Redirect to=\"/setup\" /> : <React.Fragment><Title /><Login onLogin={this.hasLoggedIn.bind(this)}/></React.Fragment>;\r\n    let setupPage = this.state.isLoggedIn ? <React.Fragment><Title /><Setup /></React.Fragment> : <Redirect to=\"/\" />; \r\n    let calibrationPage = this.state.isLoggedIn ? <React.Fragment><Title /><Calibration /></React.Fragment> : <Redirect to=\"/\" />\r\n    let testCalPage = this.state.isLoggedIn ? <React.Fragment><Title /><TestCalibration /></React.Fragment> : <Redirect to=\"/\" />;\r\n    let selectModePage = this.state.isLoggedIn ? <React.Fragment><Title /><SelectMode /></React.Fragment> : <Redirect to=\"/\" />\r\n\r\n    return (\r\n      <div style={styles.container}>\r\n          <Router>\r\n            <Switch>\r\n              {calibrationPages}\r\n              <Route path=\"/selectmode\">{selectModePage}</Route>\r\n              <Route path=\"/testcal\">{testCalPage} </Route>\r\n              <Route path=\"/calibration\">{calibrationPage}</Route>\r\n              <Route path=\"/setup\">{setupPage}</Route>\r\n              <Route path=\"/\">{loginPage}</Route>\r\n            </Switch>\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getSensorCalibrationPages() {\r\n    // Left sleeve....\r\n    let pathPrefix = '/l-';\r\n    let pages=[]; \r\n    for (let i=0; i < 12; i++) {\r\n      let path = pathPrefix + i; \r\n      let route = (\r\n        <Route key={'keyL:' + i} path={path}>\r\n          <Title />\r\n          <Sensor \r\n            chipsetId={0}\r\n            sensorIdx={i}\r\n            key={'keyL:' + i}\r\n          >\r\n          </Sensor>\r\n        </Route>\r\n      );\r\n\r\n      pages.push(route);\r\n    }\r\n\r\n    // Right sleeve...\r\n    pathPrefix = '/r-'; \r\n    for (let i = 0; i < 12; i++) {\r\n      let path = pathPrefix + i; \r\n      let route = (\r\n        <Route key={'keyR:' + i} path={path}>\r\n          <Title />\r\n          <Sensor\r\n            chipsetId={1}\r\n            sensorIdx={i}\r\n            key={'keyR:' + i}\r\n          >\r\n          </Sensor>\r\n        </Route>\r\n      );\r\n      pages.push(route); \r\n    }\r\n\r\n    return pages; \r\n  }\r\n\r\n  hasLoggedIn(state) {\r\n    console.log('Login State: ' + state);\r\n    this.setState({\r\n      isLoggedIn: state\r\n    });\r\n  }\r\n\r\n  logOut() {\r\n    this.setState({\r\n      isLoggedIn: false\r\n    });\r\n  }\r\n}\r\n\r\nexport default Radium(App);\r\n\r\n// import ble from './BLE.js'\r\n// import websocket from './Websocket.js'\r\n// import audio from './Audio.js'\r\n\r\n\r\n// <Sensor \r\n// chipsetId={this.props.chipsetId}\r\n// configName={this.state.configName}\r\n// sensorIdx={i}\r\n// fVal={fVals[i]} \r\n// bVal={bVals[i]}\r\n// key={'key' + i}\r\n// />\r\n\r\n\r\n// <button onClick={this.onConnect.bind(this)}>BLE Connect</button>\r\n// <button onClick={this.onDisconnect.bind(this)}>BLE Disconnect</button>\r\n// <button onClick={this.onPlay.bind(this)}>Play Some Audio</button>\r\n// <div style={styles.inputContainer}>\r\n//   <input onChange={this.onTextAdded.bind(this)} style={styles.input} type='text' placeholder='Transmit text.'></input>\r\n//   <div style={styles.input}>{this.state.receiveVal}</div>\r\n// </div>\r\n// <button style={connectButtonStyle} onClick={this.enableConnect.bind(this)}>Enable Connect</button>\r\n// <ParamConfigs onConfigSelected={this.onConfigSelected.bind(this)} />\r\n// <ChipsetCollection ref={this.chipsetCollectionRef} />\r\n\r\n// onConnect() {\r\n//   ble.connect();\r\n// }\r\n\r\n// onDisconnect() {\r\n//   ble.disconnect();\r\n// }\r\n\r\n// onPlay() {\r\n//   audio.play();\r\n// }\r\n\r\n// enableConnect() {\r\n//   this.setState({\r\n//     isConnected: !this.state.isConnected\r\n//   });\r\n\r\n//   websocket.updateRoom(this.onSensorDataReceived.bind(this));\r\n// }\r\n\r\n// onTextAdded(e) {\r\n//   let val = e.target.value; \r\n//   websocket.broadcastText(val);\r\n// }\r\n\r\n// onSensorDataReceived(data) {\r\n//   console.log('Sensor Data received: ' + data);\r\n//   this.setState( {\r\n//     receiveVal: data\r\n//   });\r\n// }\r\n\r\n// onConfigSelected(configName) {\r\n//   this.chipsetCollectionRef.current.updateCalibrationParams(configName); \r\n// }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './font/stylesheet.css';\r\nimport App from './components/App';\r\nimport {StyleRoot} from 'radium'\r\n\r\n// Use StyleRoot to enable keyframes and media queries for Javascript type\r\n// styles with Radium in components. \r\n// Single render function for the entire application. \r\nReactDOM.render(<StyleRoot><App /></StyleRoot>, document.getElementById('root'));"],"sourceRoot":""}