{"version":3,"sources":["components/Websocket.js","Stores/DatabaseParamStore.js","components/ParamConfigs.js","Stores/SensorDataStore.js","components/BLE.js","components/Audio.js","components/Sensor.js","components/Chipset.js","components/ChipsetCollection.js","components/App.js","index.js","Audio/testsound.wav"],"names":["this","socket","io","reconnection","reconnectionDelay","reconnectionAttempts","Infinity","once","subscribe","bind","canBroadcast","sensorDataCallback","readAllConfigCallback","console","log","on","logTime","handleSensorData","handleAllConfigs","callback","emit","text","data","payload","configName","cutoffVals","Array","fill","configs","listeners","Websocket","requestForConfigs","onAllConfigsLoaded","listener","push","filter","s","chipsetId","sensorIdx","cutoffVal","i","length","name","json","save","jsonObject","chipsetData","j","toString","dbPayload","JSON","stringify","saveUserConfig","updateUserConfig","saveParams","styles","container","position","marginLeft","marginTop","display","flexDirection","alignItems","textArea","height","sensor","width","marginRight","button","ParamConfigs","props","state","textValue","configNames","selectVal","selectRef","React","createRef","removeListener","DatabaseParamStore","onConfigsLoaded","o","getOptions","style","value","ref","onChange","onSelectChange","onTextAdded","placeholder","buttons","onClick","onSave","onDelete","v","current","new_config_names","setState","warn","updateParams","websocket","deleteUserConfig","newConfigs","_","remove","c","e","target","onConfigSelected","options","key","fullConfigs","names","Object","keys","Component","Radium","chipsetIdx","sensorDataType","sensorData","Number","parseChipsetData","myBLE","p5ble","myRxCharacteristic","myTxCharacteristic","isReceivingData","connect","handleCharacteristics","disconnect","stopNotifications","error","characteristics","startNotifications","handleIncomingData","a","replace","split","sensorDataStore","dataBuffer","writeValue","sketch","file","env","preload","loadSound","testAudio","setup","noCanvas","background","p5","Envelope","draw","noLoop","play","stop","loop","triggerAttack","myP5","input","marginBottom","Sensor","getCutoffValue","nextProps","nextState","fVal","bVal","newVal","sensoridx","cutoffChange","type","Chipset","chipData","SensorDataStore","getChipData","handleNewSensorData","sensors","getSensors","content","fVals","bVals","ChipsetCollection","chipset0Ref","chipset1Ref","updateCalibrationParams","overflow","inputContainer","connected","backgroundColor","App","isConnected","receiveVal","chipsetCollectionRef","connectButtonStyle","onConnect","onDisconnect","onPlay","enableConnect","ble","audio","updateRoom","onSensorDataReceived","val","broadcastText","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.4ba6ac2b.chunk.js","sourcesContent":["// Name: Websocket.js\r\n// Author: Amay Kataria.\r\n// Date: 06/15/2021\r\n// Description: Class responsible for communication with the webserver. We use websockets\r\n// technology for this. Here we have the websocket client, which communicates with backend\r\n// server over websockets.\r\n\r\nimport io  from 'socket.io-client'\r\n\r\nconst localhostURL = \"http://localhost:5000/app\";\r\nconst herokuURL = \"https://fabric-backend.herokuapp.com/app\";\r\nconst siteURL = herokuURL;\r\n\r\nclass Websocket {\r\n    constructor() {\r\n        this.socket = io(siteURL, {\r\n            reconnection: true,\r\n            reconnectionDelay: 500,\r\n            reconnectionAttempts: Infinity\r\n        });\r\n\r\n        this.socket.once('connect', this.subscribe.bind(this));\r\n        this.canBroadcast = false; \r\n\r\n        // ------------ Callbacks fired on response from sockets ------------------------ //\r\n        this.sensorDataCallback = ''; // Fired when the client receives data from the sensors.\r\n        this.readAllConfigCallback = ''; // Fired when the client all configs from the database. \r\n    }\r\n\r\n    subscribe() {\r\n        console.log('Connected');\r\n\r\n        // Subscribe to incoming events from the webserver here. \r\n        this.socket.on('time', this.logTime.bind(this));\r\n        this.socket.on('receiveSensorData', this.handleSensorData.bind(this));\r\n        this.socket.on('receiveAllConfigs', this.handleAllConfigs.bind(this));\r\n    }\r\n\r\n    // ----------------------- SENSOR DATA BROADCAST--------------------- //\r\n    updateRoom(callback) {\r\n        this.socket.emit('room');\r\n        this.canBroadcast = !this.canBroadcast; \r\n        this.sensorDataCallback = callback; \r\n    }\r\n\r\n    broadcastText(text) {\r\n        if (this.canBroadcast) {\r\n            this.socket.emit('sensorData', text); \r\n        }\r\n    }\r\n\r\n    // Fire the sensor data callback registered before. \r\n    handleSensorData(data) {\r\n        this.sensorDataCallback(data);\r\n    }\r\n\r\n    // ----------------------- DATABASE CALLS --------------------- //\r\n    saveUserConfig(payload) {\r\n        this.socket.emit('saveUserConfig', payload); \r\n    }\r\n\r\n    updateUserConfig(payload) {\r\n        this.socket.emit('updateUserConfig', payload);\r\n    }\r\n\r\n    deleteUserConfig(configName) {\r\n        this.socket.emit('deleteUserConfig', configName);\r\n    }\r\n\r\n    // ------------------ LOAD ALL USER CONFIGS ------------------\r\n    requestForConfigs(callback) {\r\n        this.readAllConfigCallback = callback;\r\n        this.socket.emit('requestForConfigs');\r\n    }\r\n\r\n    // Fire the readAllConfigCallback registered before. \r\n    handleAllConfigs(data) {\r\n        this.readAllConfigCallback(data); \r\n    }\r\n\r\n    // -------------------- DON'T CHANGE THESE -------------------    \r\n    disconnect() {\r\n        console.log('Socket Server Disconnected.');\r\n    }\r\n\r\n    logTime(data) {\r\n        //console.log('Socket Connection Alive: ' + data);\r\n    }\r\n\r\n}\r\n\r\n// New keyword calls the constructor for the component.\r\nexport default new Websocket();","// Name: DatabaseParamStore.js\r\n// Author: Amay Kataria. \r\n// Date: 06/22/2021\r\n// Description: This data store is responsible to hold parameters, which will be saved onto the database.  \r\n\r\nimport Websocket from \"../components/Websocket\";\r\n\r\nclass DatabaseParamStore {\r\n    constructor() {\r\n        // Cut off values for the entire system.\r\n        // This is the current state. \r\n        // Initial cutoff values filled.\r\n        this.cutoffVals = [{\r\n            'co': new Array(12).fill(150), // For chipset 0\r\n        }, {\r\n            'co': new Array(12).fill(150) // For chipset 1\r\n        }]; \r\n\r\n        // All use the user configs are loaded and stored in this. \r\n        // Any save or update should also save and update this.         \r\n        // [NOTE] We should do this based on db success but I'm not plumbing that code for now. \r\n        // Key is configName, Value is json\r\n        this.configs = {}; \r\n\r\n        // All the listeners subscribed to this database.\r\n        this.listeners = []; \r\n\r\n        // Fire an async db call to load all configs.\r\n        Websocket.requestForConfigs(this.onAllConfigsLoaded.bind(this)); \r\n    }\r\n\r\n    subscribe(listener) {\r\n        this.listeners.push(listener); \r\n        const removeListener = () => {\r\n            this.listeners = this.listeners.filter((s) => listener !== s);\r\n        };\r\n\r\n        return removeListener;\r\n    }\r\n\r\n    // Update the store. \r\n    setState(chipsetId, sensorIdx, cutoffVal) {\r\n        // console.log('ChipsetId: ' + chipsetId + ', sensorIdx: ' + sensorIdx + ', cutoffVal: ' + cutoffVal);\r\n        // Update chipset data. \r\n        this.cutoffVals[chipsetId]['co'][sensorIdx] = cutoffVal; \r\n    }\r\n\r\n    onAllConfigsLoaded(data) {\r\n        let configs = data; \r\n        for (let i = 0; i < configs.length; i++) {\r\n            let name = configs[i]['name'];\r\n            let json = configs[i]['config'];\r\n            this.configs[name] = json; \r\n        }\r\n\r\n        console.log(this.configs);\r\n\r\n        // Intimate all the subscribers of the updates.\r\n        for (let i = 0; i < this.listeners.length; i++) {\r\n            this.listeners[i](this.configs); \r\n        }\r\n    }\r\n\r\n    saveParams(configName, save = true) {\r\n        // Create the payload with the config name and sensor values. \r\n        // Both the chip params will be stored to the database. \r\n        // [name - text, config - json]\r\n        // Database payload. \r\n\r\n        // JSON object, which gets stringified and goes to the database.\r\n        let jsonObject = {}; \r\n        for (let i = 0; i < 2; i++) { // Num chips = 2\r\n            let chipsetData = {}; \r\n            chipsetData['cutoff'] = {}; \r\n            for (let j = 0; j < 12; j++) { // Num sensors = 12\r\n                let cutoffVals = this.cutoffVals[i]['co']; \r\n                chipsetData['cutoff'][j] = cutoffVals[j];  \r\n            }\r\n\r\n            jsonObject[i.toString()] = chipsetData; \r\n        }\r\n\r\n        let dbPayload = {\r\n            'name' : configName,\r\n            'config' : JSON.stringify(jsonObject)\r\n        };\r\n\r\n        if (save) {\r\n            Websocket.saveUserConfig(dbPayload);\r\n            // Update config state with the new payload. \r\n            this.configs[configName] = jsonObject;\r\n        } else {\r\n            Websocket.updateUserConfig(dbPayload);\r\n            // Replace the old config here with the new config.\r\n            this.configs[configName] = jsonObject;\r\n        }\r\n\r\n    }\r\n\r\n    updateParams(configName) {\r\n        this.saveParams(configName, false); \r\n    }\r\n\r\n    getCutoffValue(configName, chipsetId, sensorIdx) {\r\n        if (this.configs[configName]) {\r\n            let v = this.configs[configName][chipsetId]['cutoff'][sensorIdx];\r\n            return v;\r\n        } else {\r\n            // Return default values when there is no config name.\r\n            // This happens in the beginning.\r\n            return this.cutoffVals[chipsetId]['co'][sensorIdx];\r\n        }\r\n    }\r\n}\r\n\r\nexport default new DatabaseParamStore(); ","// Name: ParamConfigs.js\r\n// Author: Amay Kataria. \r\n// Date: 06/17/2021\r\n// Description: Component to handle saving, loading, and updating the sensor params\r\n// to the database. \r\n\r\nimport React from 'react'\r\nimport Radium from 'radium'\r\nimport _ from 'lodash'\r\nimport websocket from './Websocket'\r\nimport DatabaseParamStore from '../Stores/DatabaseParamStore.js'\r\n\r\nconst styles = {\r\n  container: {\r\n    position: 'relative',\r\n    marginLeft: '10px',\r\n    marginTop: '20px'\r\n  },\r\n\r\n  configs : {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    alignItems: 'center'\r\n  },\r\n\r\n  textArea: {\r\n    marginLeft: '10px',\r\n    height: '15px'\r\n  },\r\n\r\n  sensor: {\r\n    width: '30px',\r\n    height: '20px',\r\n    marginRight: '10px',\r\n    marginTop: '10px'\r\n  },\r\n\r\n  button: {\r\n    marginTop: '10px',\r\n    marginRight: '10px'\r\n  }\r\n};\r\n\r\nclass ParamConfigs extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      textValue: '',\r\n      configNames: [],\r\n      selectVal: 'newconfig', // Default value for the select box. \r\n    };\r\n\r\n    this.selectRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Subscribe to hear back from the store when data is fully loaded. \r\n    this.removeListener = DatabaseParamStore.subscribe(this.onConfigsLoaded.bind(this)); \r\n  }\r\n\r\n  render() {\r\n    let o = this.getOptions(); \r\n    return (\r\n      <div style={styles.container}>\r\n        <div style={styles.configs}>\r\n          <select value={this.state.selectVal} ref={this.selectRef} onChange={this.onSelectChange.bind(this)}>{o}</select>\r\n          <textarea\r\n            style={styles.textArea}\r\n            value={this.state.textValue}\r\n            onChange={this.onTextAdded.bind(this)}\r\n            placeholder={'Type config name..'}\r\n          />\r\n        </div>\r\n        <div style={styles.buttons}>\r\n          <button style={styles.button} onClick={this.onSave.bind(this)}>Save</button>\r\n          <button style={styles.button} onClick={this.onDelete.bind(this)}>Delete</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // Remove this listener. \r\n    this.removeListener();\r\n  }\r\n\r\n  onSave() {\r\n    // Current selected value. \r\n    let v = this.selectRef.current.value;    \r\n    if (v === 'newconfig') {\r\n      if (this.state.textValue.length > 0) {\r\n        DatabaseParamStore.saveParams(this.state.textValue); \r\n        let new_config_names = this.state.configNames;\r\n\r\n        // Add this new config created in the state. \r\n        new_config_names.push(this.state.textValue);\r\n        this.setState({\r\n          configNames: new_config_names,\r\n          selectVal: this.state.textValue,\r\n          textValue: ''\r\n        });\r\n      } else {\r\n        // Maybe update the message box with this. \r\n        console.warn('Empty config name.'); \r\n      }\r\n    } else {\r\n      // We are doing an update / ignore the this.state.configName\r\n      let configName = v; \r\n      DatabaseParamStore.updateParams(configName); \r\n    }\r\n  }\r\n\r\n  onDelete() {\r\n    let configName = this.selectRef.current.value;\r\n    websocket.deleteUserConfig(configName);\r\n\r\n    let newConfigs = this.state.configNames; \r\n    // Remove this value from the array. \r\n    _.remove(newConfigs, (c) => {\r\n      return configName === c;\r\n    });\r\n\r\n    this.setState({\r\n      selectVal: 'newconfig',\r\n      configNames: newConfigs\r\n    });\r\n  }\r\n\r\n  onSelectChange(e) {\r\n    let v = e.target.value; \r\n\r\n    if (v==='newconfig') {\r\n      this.setState({\r\n        selectVal: v\r\n      });\r\n      return;\r\n    } else {\r\n      let configs = this.state.configNames; \r\n      // Update sensor text boxes with \r\n      for (let i = 0; i < configs.length; i++) {\r\n        let name = configs[i];\r\n        if (name === v) {\r\n          // Config found in this.\r\n          // Assign the config to individual sensors. \r\n          // How will I do this???\r\n          this.setState({\r\n            selectVal: name\r\n          });\r\n          if (this.props.onConfigSelected) {\r\n            this.props.onConfigSelected(name);\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Build this list dynamically. \r\n  // These options should be populated based on the database call. \r\n  getOptions() {\r\n      let options = []; \r\n      // Blank option - always add by default.\r\n      options.push(<option key=\"new\" value=\"newconfig\">newconfig</option>);\r\n\r\n      for (let i = 0; i < this.state.configNames.length; i++) {\r\n        let name = this.state.configNames[i];\r\n        options.push(<option key={name} value={name}>{name}</option>);\r\n      }\r\n\r\n      return options; \r\n  }\r\n\r\n  onTextAdded(e) {\r\n    this.setState({\r\n      textValue: e.target.value\r\n    });\r\n  }\r\n\r\n  onConfigsLoaded(fullConfigs) {\r\n    let names = Object.keys(fullConfigs);\r\n    this.setState({\r\n      configNames: names\r\n    }); \r\n  }\r\n}\r\n\r\nexport default Radium(ParamConfigs);","// Name: SensorDataStore.js\r\n// Author: Amay Kataria. \r\n// Date: 06/21/2021\r\n// Description: Custom data store is responsible to hold all sensor data for each chip. Component subscribe to this store\r\n// or call its general access methods to get the data. \r\n// State structure. \r\n// [\r\n//     {\r\n//         'f': [xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx],\r\n//         'b': [xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx]\r\n//     },\r\n//     {\r\n//         'f': [xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx],\r\n//         'b': [xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx]\r\n//     }\r\n// ]\r\n\r\nclass SensorDataStore {\r\n    constructor() {\r\n        // Initial state.\r\n        // Array of two objects. Each object holds data from each chip.\r\n        this.state = [{\r\n            'f' : new Array(12).fill(0),\r\n            'b' : new Array(12).fill(0)\r\n        }, {\r\n            'f' : new Array(12).fill(0),\r\n            'b' : new Array(12).fill(0)\r\n        }]; \r\n\r\n        this.listeners = []; \r\n    }\r\n\r\n    // Returns the method to be called to remove itself as listener. \r\n    // Component must call that on unmounting. \r\n    subscribe(listener) {\r\n        this.listeners.push(listener); \r\n        const removeListener = () => {\r\n            this.listeners = this.listeners.filter((s) => listener !== s);\r\n        };\r\n\r\n        return removeListener;\r\n    }\r\n\r\n    // Populates the store. \r\n    setState(chipsetIdx, sensorDataType, sensorData) {\r\n        console.log('Chipset Idx, Data type, sensor Data: ' + chipsetIdx + \", \" + sensorDataType + \", \" + sensorData);\r\n        // Populate the state. \r\n        for (let i = 0; i < sensorData.length; i++) {\r\n            let v = Number(sensorData[i]); \r\n            this.state[chipsetIdx][sensorDataType][i] = v; \r\n        }\r\n\r\n        // Alert all the listeners that new data is coming. \r\n        for (let listener of this.listeners) {\r\n            listener(this.state);\r\n        }\r\n    }\r\n\r\n    getChipData(chipsetIdx) {\r\n        return this.state[chipsetIdx]; \r\n    }\r\n}\r\n\r\nexport default new SensorDataStore(); ","// Name: BLE.js\r\n// Author: Amay Kataria. \r\n// Date: 06/15/2021\r\n// Description: Class responsible for everything related to bluetooth communication with Arduino. \r\n// Receives a callback function in its constructor that gets called after sensor data from the \r\n// Arduino is parsed.\r\n\r\nimport p5ble from 'p5ble'\r\nimport sensorDataStore from '../Stores/SensorDataStore';\r\n\r\n// UART service & characteristic description. \r\nconst serviceUuid = \"6e400001-b5a3-f393-e0a9-e50e24dcca9e\";\r\n// const txCharacteristic = \"6e400002-b5a3-f393-e0a9-e50e24dcca9e\"; // transmit is from the phone's perspective\r\n// const rxCharacteristic = \"6e400003-b5a3-f393-e0a9-e50e24dcca9e\";  // receive is from the phone's perspective\r\n\r\nclass BLE {\r\n  constructor(parseChipsetData) {\r\n    this.myBLE = new p5ble(); \r\n    this.myRxCharacteristic = '';\r\n    this.myTxCharacteristic = '';\r\n    this.isReceivingData = false;\r\n  }\r\n\r\n  connect() {\r\n    // Registered callback to setup service characteristics. \r\n    // Called if the handshake between client and server is successful. \r\n    this.myBLE.connect(serviceUuid, this.handleCharacteristics.bind(this)); \r\n  }\r\n\r\n  disconnect() {\r\n    this.myBLE.disconnect();\r\n  }\r\n\r\n  stop() {\r\n    // Check if bluetooth has been initialized or not. \r\n    if (this.myRxCharacteristic !== '') {\r\n        this.myBLE.stopNotifications(this.myRxCharacteristic);\r\n        this.isReceivingData = false;\r\n    } else {\r\n        console.warn(\"BLE: Not initialized.\"); \r\n    }\r\n  }\r\n\r\n  // Read UART characteristics. \r\n  handleCharacteristics(error, characteristics) {\r\n      if (error) {\r\n          console.log('error: ', error);\r\n          return; \r\n      }\r\n\r\n      this.myTxCharacteristic = characteristics[0]; \r\n      this.myRxCharacteristic = characteristics[1];\r\n\r\n      console.log(this.myTxCharacteristic);\r\n      console.log(this.myRxCharacteristic);\r\n      this.myBLE.startNotifications(this.myRxCharacteristic, this.handleIncomingData.bind(this), 'string');\r\n\r\n      this.isReceivingData = true; \r\n      console.log(\"BLE: Successfully paired. Ready to communicate.\")\r\n  }\r\n\r\n  // NT-V,V,V,V,V....V\r\n  // N-sensor index, T-data type, V-line value\r\n  // Parse sensor data based on the above format in which \r\n  // the data is sent from the arduino. \r\n  handleIncomingData(data) {\r\n      // Clean the string with end of line characters. \r\n      data = data.replace(/\\0[\\s\\S]*$/g,'');\r\n      let chipsetIdx; let sensorDataType; let sensorData = []; \r\n      let a = data.split('-');\r\n      chipsetIdx = a[0][0];\r\n      sensorDataType = a[0][1];   \r\n      sensorData = a[1].split(','); \r\n      \r\n      // Debug: Uncomment for raw sensor data received from bluetooth. \r\n      // console.log('Chipset Idx, Data type, sensor Data: ' + chipsetIdx + \", \" + sensorDataType + \", \" + sensorData);\r\n      sensorDataStore.setState(chipsetIdx, sensorDataType, sensorData); \r\n  }\r\n\r\n  // Data buffer must be uint8Array data type of javascript.\r\n  sendBuffer(dataBuffer) {\r\n      if (this.myTxCharacteristic !== '') {\r\n          this.myTxCharacteristic.writeValue(dataBuffer);\r\n          console.log('BLE: Buffer sent: ' + dataBuffer);\r\n      } else {\r\n          console.warn('BLE: Ensure Bluetooth is connected.');\r\n      }\r\n  }\r\n\r\n}\r\n\r\n// New keyword calls the constructor for the component.\r\nexport default new BLE(); ","// Name: Audio.js\r\n// Author: Amay Kataria. \r\n// Date: 06/15/2021\r\n// Description: Class responsible to load all audio files. It's done by instantiating the \r\n// p5 engine in instance mode and calling into through a custom wrapper. \r\n\r\nimport p5 from 'p5'\r\nimport 'p5/lib/addons/p5.sound'\r\n\r\n// Load audio files here. \r\nimport testAudio from '../Audio/testsound.wav'\r\n\r\nlet t1 = 0.1; // attack time in seconds\r\nlet l1 = 0.7; // attack level 0.0 to 1.0\r\nlet t2 = 0.3; // decay time in seconds\r\nlet l2 = 0.1; // decay level  0.0 to 1.0\r\n\r\nvar sketch = (s) => {\r\n    let file; \r\n    let env; \r\n    s.preload = () => {\r\n        file = s.loadSound(testAudio);\r\n    }\r\n    \r\n    s.setup = () => {\r\n        //s.createCanvas(window.innerWidth, window.innerHeight);\r\n        s.noCanvas();\r\n        s.background(0);\r\n        env = new p5.Envelope(t1, l1, t2, l2);\r\n    };\r\n\r\n    s.draw = () => {\r\n        s.noLoop(); \r\n    };\r\n\r\n    s.play = () => {\r\n        file.stop();\r\n        file.loop();\r\n        env.triggerAttack(file);\r\n    }\r\n};\r\n\r\nclass Audio {\r\n    constructor() {\r\n        this.myP5 = new p5(sketch);\r\n    }\r\n\r\n    play() {\r\n        this.myP5.play(); \r\n    }\r\n}\r\n\r\nexport default new Audio();","// Name: Sensor.js\r\n// Author: Amay Kataria. \r\n// Date: 06/21/2021\r\n// Description: Sensor component that references all the attributes like sensor values, calibration parameters,\r\n// audio outputs, etcs. \r\n\r\nimport React from 'react'\r\nimport Radium from 'radium'\r\n\r\nimport DatabaseParamStore from '../Stores/DatabaseParamStore';\r\n\r\nconst styles = {\r\n  container: {\r\n    position: 'relative'\r\n  },\r\n\r\n  input: {\r\n      width: '40px',\r\n      height: '20px',\r\n      marginBottom: '10px',\r\n      marginTop: '5px'\r\n  }\r\n};\r\n\r\nclass Sensor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n        cutoffVal: DatabaseParamStore.getCutoffValue(this.props.configName, this.props.chipsetId, this.props.sensorIdx)\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n      // Be careful, no state changes will happen.\r\n      if (this.props.fVal !== nextProps.fVal || \r\n            this.props.bVal !== nextProps.bVal || \r\n              this.props.configName !== nextProps.configName ||\r\n                  this.state.cutoffVal !== nextState.cutoffVal) {\r\n          \r\n          // Config has changed, so update the cut off value.\r\n          if (this.props.configName !== nextProps.configName) {\r\n            let newVal = DatabaseParamStore.getCutoffValue(nextProps.configName, this.props.chipsetId, this.props.sensorIdx); \r\n            this.setState({\r\n              cutoffVal : newVal\r\n            });\r\n          }\r\n          return true; \r\n      } else {\r\n          return false; \r\n      }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={styles.container}>\r\n        <div>\r\n            <span>{'Sensor Idx '}</span>{this.props.sensoridx}<span>{', Base Val: '}</span>{this.props.bVal}<span>{', Filtered Val: '}</span>{this.props.fVal}\r\n        </div>\r\n        <span>{'Cutoff Value: '}</span><input style={styles.input} onChange={this.cutoffChange.bind(this)} type=\"number\" value={this.state.cutoffVal}></input>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  cutoffChange(e) {\r\n    let v = e.target.value; \r\n    this.setState({\r\n        cutoffVal: Number(v)\r\n    });\r\n\r\n    DatabaseParamStore.setState(this.props.chipsetId, this.props.sensorIdx, v);\r\n  }\r\n}\r\n\r\nexport default Radium(Sensor);","// Name: Chipset.js\r\n// Author: Amay Kataria. \r\n// Date: 06/21/2021\r\n// Description: Wrapper class for each chipset. \r\n\r\nimport React from 'react'\r\nimport Radium from 'radium'\r\nimport Sensor from './Sensor'\r\nimport SensorDataStore  from '../Stores/SensorDataStore';\r\n\r\nconst styles = {\r\n  container: {\r\n    position: 'relative',\r\n    marginTop: '20px',\r\n    display: 'flex',\r\n    flexDirection: 'column'\r\n  }\r\n};\r\n\r\nclass Chipset extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Use the chipset id to collect sensorData from the store. \r\n    this.state={\r\n        chipData: SensorDataStore.getChipData(this.props.chipsetId),\r\n        configName: ''\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.removeListener = SensorDataStore.subscribe(this.handleNewSensorData.bind(this));\r\n  }\r\n\r\n  render() {\r\n    let sensors = this.getSensors(); \r\n    let content = 'Chipset ' + this.props.chipsetId; \r\n    return (\r\n      <div style={styles.container}>\r\n        { content }\r\n        { sensors } \r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n      this.removeListener();\r\n  }\r\n\r\n  getSensors() {    \r\n    // Gives an array of filtered values. \r\n    let fVals = this.state.chipData['f']; \r\n    let bVals = this.state.chipData['b'];\r\n    let sensors = [];\r\n    for (let i = 0; i < fVals.length; i++) {\r\n        let s = (\r\n            <Sensor \r\n                chipsetId={this.props.chipsetId}\r\n                configName={this.state.configName}\r\n                sensorIdx={i}\r\n                fVal={fVals[i]} \r\n                bVal={bVals[i]}\r\n                key={'key' + i}\r\n            />\r\n        );\r\n\r\n        sensors.push(s); \r\n    }\r\n    return sensors; \r\n  }\r\n\r\n  handleNewSensorData(sensorData) {\r\n    let data = sensorData[this.props.chipsetId];\r\n    this.setState({\r\n        chipData: data\r\n    }); \r\n  }\r\n\r\n  updateCalibrationParams(configName) {\r\n    this.setState({\r\n      configName: configName\r\n    }); \r\n  }\r\n}\r\n\r\nexport default Radium(Chipset);","// Name: ChipsetCollection.js\r\n// Author: Amay Kataria. \r\n// Date: 06/21/2021\r\n// Description: Very simple wrapper class that holds all chipsets. \r\n\r\nimport React from 'react'\r\nimport Radium from 'radium'\r\nimport Chipset from './Chipset'\r\n\r\nconst styles = {\r\n  container: {\r\n    position: 'relative',\r\n    marginLeft: '10px'\r\n  }\r\n};\r\n\r\nclass ChipsetCollection extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n    };\r\n\r\n    this.chipset0Ref = React.createRef();\r\n    this.chipset1Ref = React.createRef(); \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={styles.container}>\r\n          <Chipset ref={this.chipset0Ref} key='zero' chipsetId={0} />\r\n          <Chipset ref={this.chipset1Ref} key='one' chipsetId={1} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  updateCalibrationParams(configName) {\r\n    this.chipset0Ref.current.updateCalibrationParams(configName);\r\n    this.chipset1Ref.current.updateCalibrationParams(configName);\r\n  }\r\n}\r\n\r\nexport default Radium(ChipsetCollection);","// Name: App.js\r\n// Author: Amay Kataria. \r\n// Date: 06/15/2021\r\n// Description: Root class, which is the entry\r\n\r\nimport React from 'react'\r\nimport Radium from 'radium'\r\n\r\nimport ParamConfigs from './ParamConfigs.js'\r\nimport ble from './BLE.js'\r\nimport websocket from './Websocket.js'\r\nimport audio from './Audio.js'\r\nimport ChipsetCollection from './ChipsetCollection'\r\n\r\nconst styles = {\r\n  container: {\r\n    position: 'relative',\r\n    overflow: 'scroll'\r\n  },\r\n\r\n  content: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    width: '400px'\r\n  },\r\n\r\n  inputContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'row'\r\n  },\r\n\r\n  input:{\r\n    width: '200px',\r\n    marginTop: '10px',\r\n    marginLeft: '10px'\r\n  },\r\n\r\n  connected: {\r\n    backgroundColor: 'green'\r\n  }\r\n};\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      isConnected: false,\r\n      receiveVal: 'Receive Text'\r\n    };\r\n\r\n    this.chipsetCollectionRef = React.createRef(); \r\n  }\r\n\r\n  render() {\r\n    let connectButtonStyle = this.state.isConnected ? [styles.input, styles.connected] : styles.input;\r\n\r\n    return (\r\n      <div style={styles.content}>\r\n          <button onClick={this.onConnect.bind(this)}>BLE Connect</button>\r\n          <button onClick={this.onDisconnect.bind(this)}>BLE Disconnect</button>\r\n          <button onClick={this.onPlay.bind(this)}>Play Some Audio</button>\r\n          <div style={styles.inputContainer}>\r\n            <input onChange={this.onTextAdded.bind(this)} style={styles.input} type='text' placeholder='Transmit text.'></input>\r\n            <div style={styles.input}>{this.state.receiveVal}</div>\r\n          </div>\r\n          <button style={connectButtonStyle} onClick={this.enableConnect.bind(this)}>Enable Connect</button>\r\n          <ParamConfigs onConfigSelected={this.onConfigSelected.bind(this)} />\r\n          <ChipsetCollection ref={this.chipsetCollectionRef} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  onConnect() {\r\n    ble.connect();\r\n  }\r\n\r\n  onDisconnect() {\r\n    ble.disconnect();\r\n  }\r\n\r\n  onPlay() {\r\n    audio.play();\r\n  }\r\n\r\n  enableConnect() {\r\n    this.setState({\r\n      isConnected: !this.state.isConnected\r\n    });\r\n\r\n    websocket.updateRoom(this.onSensorDataReceived.bind(this));\r\n  }\r\n\r\n  onTextAdded(e) {\r\n    let val = e.target.value; \r\n    websocket.broadcastText(val);\r\n  }\r\n\r\n  onSensorDataReceived(data) {\r\n    console.log('Sensor Data received: ' + data);\r\n    this.setState( {\r\n      receiveVal: data\r\n    });\r\n  }\r\n\r\n  onConfigSelected(configName) {\r\n    this.chipsetCollectionRef.current.updateCalibrationParams(configName); \r\n  }\r\n}\r\n\r\nexport default Radium(App);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './font/stylesheet.css';\r\nimport App from './components/App';\r\nimport {StyleRoot} from 'radium'\r\n\r\n// Use StyleRoot to enable keyframes and media queries for Javascript type\r\n// styles with Radium in components. \r\n// Single render function for the entire application. \r\nReactDOM.render(<StyleRoot><App /></StyleRoot>, document.getElementById('root'));","module.exports = __webpack_public_path__ + \"static/media/testsound.1f40cfce.wav\";"],"sourceRoot":""}