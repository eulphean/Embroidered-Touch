{"version":3,"sources":["components/BLE.js","components/Websocket.js","components/Audio.js","components/App.js","index.js","Audio/testsound.wav"],"names":["parseChipsetData","this","myBLE","p5ble","myRxCharacteristic","myTxCharacteristic","callbackData","isReceivingData","connect","handleCharacteristics","bind","stopNotifications","console","warn","error","characteristics","log","startNotifications","handleIncomingData","data","chipsetIdx","sensorDataType","sensorData","a","split","dataBuffer","writeValue","socket","io","reconnection","reconnectionDelay","reconnectionAttempts","Infinity","once","subscribe","canBroadcast","dataCallback","on","logTime","handleSensorData","callback","emit","text","sketch","s","file","env","preload","loadSound","testAudio","setup","noCanvas","background","p5","Envelope","draw","noLoop","play","stop","loop","triggerAttack","myP5","styles","container","position","content","display","flexDirection","width","inputContainer","input","marginTop","marginLeft","connected","backgroundColor","App","props","state","isConnected","receiveVal","websocket","subscribeForUpdate","onDataReceived","connectButtonStyle","style","onClick","onPlay","onChange","onTextAdded","type","placeholder","enableConnect","ble","audio","setState","updateBroadcast","e","val","target","value","broadcastText","React","Component","Radium","ReactDOM","render","document","getElementById","module","exports"],"mappings":"6RAoFe,M,WArEb,WAAYA,GAAmB,oBAC7BC,KAAKC,MAAQ,IAAIC,IACjBF,KAAKG,mBAAqB,GAC1BH,KAAKI,mBAAqB,GAC1BJ,KAAKK,aAAeN,EACpBC,KAAKM,iBAAkB,E,2CAGzB,WAGEN,KAAKC,MAAMM,QAhBK,uCAgBgBP,KAAKQ,sBAAsBC,KAAKT,S,kBAGlE,WAEkC,KAA5BA,KAAKG,oBACLH,KAAKC,MAAMS,kBAAkBV,KAAKG,oBAClCH,KAAKM,iBAAkB,GAEvBK,QAAQC,KAAK,2B,mCAKnB,SAAsBC,EAAOC,GACrBD,EACAF,QAAQI,IAAI,UAAWF,IAI3Bb,KAAKI,mBAAqBU,EAAgB,GAC1Cd,KAAKG,mBAAqBW,EAAgB,GAC1Cd,KAAKC,MAAMe,mBAAmBhB,KAAKG,mBAAoBH,KAAKiB,mBAAmBR,KAAKT,MAAO,UAE3FA,KAAKM,iBAAkB,EACvBK,QAAQI,IAAI,sD,gCAOhB,SAAmBG,GACf,IAAIC,EAAgBC,EAAoBC,EACpCC,EAAIJ,EAAKK,MAAM,KACnBJ,EAAaG,EAAE,GAAG,GAClBF,EAAiBE,EAAE,GAAG,GACtBD,EAAaC,EAAE,GAAGC,MAAM,KAKxBvB,KAAKK,aAAac,EAAYC,EAAgBC,K,wBAIlD,SAAWG,GACyB,KAA5BxB,KAAKI,oBACLJ,KAAKI,mBAAmBqB,WAAWD,GACnCb,QAAQI,IAAI,qBAAuBS,IAEnCb,QAAQC,KAAK,2C,uBCbR,M,WAlDX,aAAe,oBACXZ,KAAK0B,OAASC,IALJ,2CAKgB,CACtBC,cAAc,EACdC,kBAAmB,IACnBC,qBAAsBC,MAG1B/B,KAAK0B,OAAOM,KAAK,UAAWhC,KAAKiC,UAAUxB,KAAKT,OAChDA,KAAKkC,cAAe,EACpBlC,KAAKmC,aAAe,G,6CAGxB,WACIxB,QAAQI,IAAI,aAGZf,KAAK0B,OAAOU,GAAG,OAAQpC,KAAKqC,QAAQ5B,KAAKT,OACzCA,KAAK0B,OAAOU,GAAG,oBAAqBpC,KAAKsC,iBAAiB7B,KAAKT,S,gCAGnE,SAAmBuC,GACfvC,KAAKmC,aAAeI,EACpB5B,QAAQI,IAAIf,KAAKmC,gB,wBAGrB,WACIxB,QAAQI,IAAI,iC,qBAGhB,SAAQG,GACJP,QAAQI,IAAI,4BAA8BG,K,6BAG9C,WACIlB,KAAK0B,OAAOc,KAAK,aACjBxC,KAAKkC,cAAgBlC,KAAKkC,e,2BAG9B,SAAcO,GACNzC,KAAKkC,cACLlC,KAAK0B,OAAOc,KAAK,aAAcC,K,8BAIvC,SAAiBvB,GACblB,KAAKmC,aAAajB,O,iDC1CtBwB,EAAS,SAACC,GACV,IAAIC,EACAC,EACJF,EAAEG,QAAU,WACRF,EAAOD,EAAEI,UAAUC,MAGvBL,EAAEM,MAAQ,WAENN,EAAEO,WACFP,EAAEQ,WAAW,GACbN,EAAM,IAAIO,IAAGC,SAhBZ,GACA,GACA,GACA,KAgBLV,EAAEW,KAAO,WACLX,EAAEY,UAGNZ,EAAEa,KAAO,WACLZ,EAAKa,OACLb,EAAKc,OACLb,EAAIc,cAAcf,KAcX,M,WATX,aAAe,oBACX5C,KAAK4D,KAAO,IAAIR,IAAGV,G,wCAGvB,WACI1C,KAAK4D,KAAKJ,W,MCpCZK,EAAS,CACbC,UAAW,CACTC,SAAU,YAGZC,QAAS,CACPC,QAAS,OACTC,cAAe,SACfC,MAAO,SAGTC,eAAgB,CACdH,QAAS,OACTC,cAAe,OAGjBG,MAAM,CACJF,MAAO,QACPG,UAAW,OACXC,WAAY,QAGdC,UAAW,CACTC,gBAAiB,UAIfC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAM,CACTC,aAAa,EACbC,WAAY,gBAGdC,EAAUC,mBAAmB,EAAKC,eAAexE,KAApB,iBAPZ,E,0CAUnB,WACE,IAAIyE,EAAqBlF,KAAK4E,MAAMC,YAAc,CAAChB,EAAOQ,MAAOR,EAAOW,WAAaX,EAAOQ,MAE5F,OACE,yBAAKc,MAAOtB,EAAOG,SACf,4BAAQoB,QAASpF,KAAKoF,QAAQ3E,KAAKT,OAAnC,eACA,4BAAQoF,QAASpF,KAAKqF,OAAO5E,KAAKT,OAAlC,mBACA,yBAAKmF,MAAOtB,EAAOO,gBACjB,2BAAOkB,SAAUtF,KAAKuF,YAAY9E,KAAKT,MAAOmF,MAAOtB,EAAOQ,MAAOmB,KAAK,OAAOC,YAAY,mBAC3F,yBAAKN,MAAOtB,EAAOQ,OAAQrE,KAAK4E,MAAME,aAExC,4BAAQK,MAAOD,EAAoBE,QAASpF,KAAK0F,cAAcjF,KAAKT,OAApE,qB,qBAKR,WACE2F,EAAIpF,Y,oBAGN,WACEqF,EAAMpC,S,2BAGR,WACExD,KAAK6F,SAAS,CACZhB,aAAc7E,KAAK4E,MAAMC,cAG3BE,EAAUe,oB,yBAGZ,SAAYC,GACV,IAAIC,EAAMD,EAAEE,OAAOC,MACnBnB,EAAUoB,cAAcH,K,4BAG1B,SAAe9E,GACbP,QAAQI,IAAI,kBAAoBG,GAChClB,KAAK6F,SAAU,CACbf,WAAY5D,Q,GAnDAkF,IAAMC,WAwDTC,cAAO5B,G,QCrFtB6B,IAASC,OAAO,kBAAC,IAAD,KAAW,kBAAC,EAAD,OAAqBC,SAASC,eAAe,U,mBCVxEC,EAAOC,QAAU,IAA0B,uC","file":"static/js/main.42578898.chunk.js","sourcesContent":["// Name: BLE.js\r\n// Author: Amay Kataria. \r\n// Date: 06/15/2021\r\n// Description: Class responsible for everything related to bluetooth communication with Arduino. \r\n// Receives a callback function in its constructor that gets called after sensor data from the \r\n// Arduino is parsed.\r\n\r\nimport p5ble from 'p5ble'\r\n\r\n// UART service & characteristic description. \r\nconst serviceUuid = \"6e400001-b5a3-f393-e0a9-e50e24dcca9e\";\r\n// const txCharacteristic = \"6e400002-b5a3-f393-e0a9-e50e24dcca9e\"; // transmit is from the phone's perspective\r\n// const rxCharacteristic = \"6e400003-b5a3-f393-e0a9-e50e24dcca9e\";  // receive is from the phone's perspective\r\n\r\nclass BLE {\r\n  constructor(parseChipsetData) {\r\n    this.myBLE = new p5ble(); \r\n    this.myRxCharacteristic = '';\r\n    this.myTxCharacteristic = '';\r\n    this.callbackData = parseChipsetData;\r\n    this.isReceivingData = false;\r\n  }\r\n\r\n  connect() {\r\n    // Registered callback to setup service characteristics. \r\n    // Called if the handshake between client and server is successful. \r\n    this.myBLE.connect(serviceUuid, this.handleCharacteristics.bind(this)); \r\n  }\r\n\r\n  stop() {\r\n    // Check if bluetooth has been initialized or not. \r\n    if (this.myRxCharacteristic !== '') {\r\n        this.myBLE.stopNotifications(this.myRxCharacteristic);\r\n        this.isReceivingData = false;\r\n    } else {\r\n        console.warn(\"BLE: Not initialized.\"); \r\n    }\r\n  }\r\n\r\n  // Read UART characteristics. \r\n  handleCharacteristics(error, characteristics) {\r\n      if (error) {\r\n          console.log('error: ', error);\r\n          return; \r\n      }\r\n\r\n      this.myTxCharacteristic = characteristics[0]; \r\n      this.myRxCharacteristic = characteristics[1];\r\n      this.myBLE.startNotifications(this.myRxCharacteristic, this.handleIncomingData.bind(this), 'string');\r\n\r\n      this.isReceivingData = true; \r\n      console.log(\"BLE: Successfully paired. Ready to communicate.\")\r\n  }\r\n\r\n  // NT-V,V,V,V,V....V\r\n  // N-sensor index, T-data type, V-line value\r\n  // Parse sensor data based on the above format in which \r\n  // the data is sent from the arduino. \r\n  handleIncomingData(data) {\r\n      let chipsetIdx; let sensorDataType; let sensorData = []; \r\n      let a = data.split('-');\r\n      chipsetIdx = a[0][0];\r\n      sensorDataType = a[0][1];   \r\n      sensorData = a[1].split(','); \r\n      \r\n      // Debug: Uncomment for raw sensor data received from bluetooth. \r\n      // console.log('Chipset Idx, Data type, sensor Data: ' + chipsetIdx + \", \" + sensorDataType + \", \" + sensorData);\r\n\r\n      this.callbackData(chipsetIdx, sensorDataType, sensorData);\r\n  }\r\n\r\n  // Data buffer must be uint8Array data type of javascript.\r\n  sendBuffer(dataBuffer) {\r\n      if (this.myTxCharacteristic !== '') {\r\n          this.myTxCharacteristic.writeValue(dataBuffer);\r\n          console.log('BLE: Buffer sent: ' + dataBuffer);\r\n      } else {\r\n          console.warn('BLE: Ensure Bluetooth is connected.');\r\n      }\r\n  }\r\n\r\n}\r\n\r\n// New keyword calls the constructor for the component.\r\nexport default new BLE(); ","// Name: Websocket.js\r\n// Author: Amay Kataria.\r\n// Date: 06/15/2021\r\n// Description: Class responsible for communication with the webserver. We use websockets\r\n// technology for this. Here we have the websocket client, which communicates with backend\r\n// server over websockets.\r\n\r\nimport io  from 'socket.io-client'\r\n\r\nconst localhostURL = \"http://localhost:5000/app\";\r\nconst herokuURL = \"https://fabric-backend.herokuapp.com/app\";\r\nconst siteURL = herokuURL;\r\n\r\nclass Websocket {\r\n    constructor() {\r\n        this.socket = io(siteURL, {\r\n            reconnection: true,\r\n            reconnectionDelay: 500,\r\n            reconnectionAttempts: Infinity\r\n        });\r\n\r\n        this.socket.once('connect', this.subscribe.bind(this));\r\n        this.canBroadcast = false; \r\n        this.dataCallback = ''; // Fired when the client receives data from the sensor.\r\n    }\r\n\r\n    subscribe() {\r\n        console.log('Connected');\r\n\r\n        // Subscribe to incoming events from the webserver here. \r\n        this.socket.on('time', this.logTime.bind(this));\r\n        this.socket.on('receiveSensorData', this.handleSensorData.bind(this));\r\n    }\r\n\r\n    subscribeForUpdate(callback) {\r\n        this.dataCallback = callback; \r\n        console.log(this.dataCallback);\r\n    }\r\n\r\n    disconnect() {\r\n        console.log('Socket Server Disconnected.')\r\n    }\r\n\r\n    logTime(data) {\r\n        console.log('Socket Connection Alive: ' + data);\r\n    }\r\n\r\n    updateBroadcast() {\r\n        this.socket.emit('broadcast');\r\n        this.canBroadcast = !this.canBroadcast; \r\n    }\r\n\r\n    broadcastText(text) {\r\n        if (this.canBroadcast) {\r\n            this.socket.emit('sensorData', text); \r\n        }\r\n    }\r\n\r\n    handleSensorData(data) {\r\n        this.dataCallback(data);\r\n    }\r\n}\r\n\r\n// New keyword calls the constructor for the component.\r\nexport default new Websocket();","// Name: Audio.js\r\n// Author: Amay Kataria. \r\n// Date: 06/15/2021\r\n// Description: Class responsible to load all audio files. It's done by instantiating the \r\n// p5 engine in instance mode and calling into through a custom wrapper. \r\n\r\nimport p5 from 'p5'\r\nimport 'p5/lib/addons/p5.sound'\r\n\r\n// Load audio files here. \r\nimport testAudio from '../Audio/testsound.wav'\r\n\r\nlet t1 = 0.1; // attack time in seconds\r\nlet l1 = 0.7; // attack level 0.0 to 1.0\r\nlet t2 = 0.3; // decay time in seconds\r\nlet l2 = 0.1; // decay level  0.0 to 1.0\r\n\r\nvar sketch = (s) => {\r\n    let file; \r\n    let env; \r\n    s.preload = () => {\r\n        file = s.loadSound(testAudio);\r\n    }\r\n    \r\n    s.setup = () => {\r\n        //s.createCanvas(window.innerWidth, window.innerHeight);\r\n        s.noCanvas();\r\n        s.background(0);\r\n        env = new p5.Envelope(t1, l1, t2, l2);\r\n    };\r\n\r\n    s.draw = () => {\r\n        s.noLoop(); \r\n    };\r\n\r\n    s.play = () => {\r\n        file.stop();\r\n        file.loop();\r\n        env.triggerAttack(file);\r\n    }\r\n};\r\n\r\nclass Audio {\r\n    constructor() {\r\n        this.myP5 = new p5(sketch);\r\n    }\r\n\r\n    play() {\r\n        this.myP5.play(); \r\n    }\r\n}\r\n\r\nexport default new Audio();","// Name: App.js\r\n// Author: Amay Kataria. \r\n// Date: 06/15/2021\r\n// Description: Root class, which is the entry\r\n\r\nimport React from 'react'\r\nimport Radium from 'radium'\r\n\r\nimport ble from './BLE.js'\r\nimport websocket from './Websocket.js'\r\nimport audio from './Audio.js'\r\n\r\nconst styles = {\r\n  container: {\r\n    position: 'relative'\r\n  },\r\n\r\n  content: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    width: '500px'\r\n  },\r\n\r\n  inputContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'row'\r\n  },\r\n\r\n  input:{\r\n    width: '200px',\r\n    marginTop: '10px',\r\n    marginLeft: '10px'\r\n  },\r\n\r\n  connected: {\r\n    backgroundColor: 'green'\r\n  }\r\n};\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      isConnected: false,\r\n      receiveVal: 'Receive Text'\r\n    };\r\n\r\n    websocket.subscribeForUpdate(this.onDataReceived.bind(this));\r\n  }\r\n\r\n  render() {\r\n    let connectButtonStyle = this.state.isConnected ? [styles.input, styles.connected] : styles.input;\r\n\r\n    return (\r\n      <div style={styles.content}>\r\n          <button onClick={this.onClick.bind(this)}>BLE Connect</button>\r\n          <button onClick={this.onPlay.bind(this)}>Play Some Audio</button>\r\n          <div style={styles.inputContainer}>\r\n            <input onChange={this.onTextAdded.bind(this)} style={styles.input} type='text' placeholder='Transmit text.'></input>\r\n            <div style={styles.input}>{this.state.receiveVal}</div>\r\n          </div>\r\n          <button style={connectButtonStyle} onClick={this.enableConnect.bind(this)}>Enable Connect</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  onClick() {\r\n    ble.connect();\r\n  }\r\n\r\n  onPlay() {\r\n    audio.play();\r\n  }\r\n\r\n  enableConnect() {\r\n    this.setState({\r\n      isConnected: !this.state.isConnected\r\n    });\r\n\r\n    websocket.updateBroadcast();\r\n  }\r\n\r\n  onTextAdded(e) {\r\n    let val = e.target.value; \r\n    websocket.broadcastText(val);\r\n  }\r\n\r\n  onDataReceived(data) {\r\n    console.log('Data received: ' + data);\r\n    this.setState( {\r\n      receiveVal: data\r\n    });\r\n  }\r\n}\r\n\r\nexport default Radium(App);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './font/stylesheet.css';\r\nimport App from './components/App';\r\nimport {StyleRoot} from 'radium'\r\n\r\n// Use StyleRoot to enable keyframes and media queries for Javascript type\r\n// styles with Radium in components. \r\n// Single render function for the entire application. \r\nReactDOM.render(<StyleRoot><App /></StyleRoot>, document.getElementById('root'));","module.exports = __webpack_public_path__ + \"static/media/testsound.1f40cfce.wav\";"],"sourceRoot":""}