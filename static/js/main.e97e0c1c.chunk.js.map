{"version":3,"sources":["components/Websocket.js","components/ParamConfigs.js","Stores/SensorDataStore.js","components/BLE.js","components/Audio.js","components/Sensor.js","components/Chipset.js","components/ChipsetCollection.js","components/App.js","index.js","Audio/testsound.wav"],"names":["this","socket","io","reconnection","reconnectionDelay","reconnectionAttempts","Infinity","once","subscribe","bind","canBroadcast","sensorDataCallback","readAllConfigCallback","console","log","on","logTime","handleSensorData","handleAllConfigs","callback","emit","text","data","payload","configName","styles","container","position","marginLeft","marginTop","configs","display","flexDirection","alignItems","textArea","height","sensor","width","marginRight","button","ParamConfigs","props","state","selectVal","s1","s2","s3","websocket","requestForConfigs","onAllConfigsLoaded","selectRef","React","createRef","o","getOptions","style","value","ref","onChange","onSelectChange","onTextAdded","placeholder","buttons","onClick","onSave","onDelete","sensorData","s1Change","type","s2Change","s3Change","v","current","length","saveUserConfig","new_configs","push","setState","warn","updateUserConfig","deleteUserConfig","newConfigs","_","remove","c","e","target","i","options","key","name","d","Component","Radium","Array","fill","listeners","listener","filter","s","chipsetIdx","sensorDataType","Number","parseChipsetData","myBLE","p5ble","myRxCharacteristic","myTxCharacteristic","isReceivingData","connect","handleCharacteristics","disconnect","stopNotifications","error","characteristics","startNotifications","handleIncomingData","a","replace","split","sensorDataStore","dataBuffer","writeValue","sketch","file","env","preload","loadSound","testAudio","setup","noCanvas","background","p5","Envelope","draw","noLoop","play","stop","loop","triggerAttack","myP5","Sensor","nextProps","nextState","fVal","bVal","content","idx","Chipset","chipData","SensorDataStore","getChipData","chipsetId","removeListener","handleNewSensorData","sensors","getSensors","fVals","bVals","ChipsetCollection","overflow","inputContainer","input","connected","backgroundColor","App","isConnected","receiveVal","connectButtonStyle","onConnect","onDisconnect","onPlay","enableConnect","ble","audio","updateRoom","onSensorDataReceived","val","broadcastText","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.e97e0c1c.chunk.js","sourcesContent":["// Name: Websocket.js\r\n// Author: Amay Kataria.\r\n// Date: 06/15/2021\r\n// Description: Class responsible for communication with the webserver. We use websockets\r\n// technology for this. Here we have the websocket client, which communicates with backend\r\n// server over websockets.\r\n\r\nimport io  from 'socket.io-client'\r\n\r\nconst localhostURL = \"http://localhost:5000/app\";\r\nconst herokuURL = \"https://fabric-backend.herokuapp.com/app\";\r\nconst siteURL = herokuURL;\r\n\r\nclass Websocket {\r\n    constructor() {\r\n        this.socket = io(siteURL, {\r\n            reconnection: true,\r\n            reconnectionDelay: 500,\r\n            reconnectionAttempts: Infinity\r\n        });\r\n\r\n        this.socket.once('connect', this.subscribe.bind(this));\r\n        this.canBroadcast = false; \r\n\r\n        // ------------ Callbacks fired on response from sockets ------------------------ //\r\n        this.sensorDataCallback = ''; // Fired when the client receives data from the sensors.\r\n        this.readAllConfigCallback = ''; // Fired when the client all configs from the database. \r\n    }\r\n\r\n    subscribe() {\r\n        console.log('Connected');\r\n\r\n        // Subscribe to incoming events from the webserver here. \r\n        this.socket.on('time', this.logTime.bind(this));\r\n        this.socket.on('receiveSensorData', this.handleSensorData.bind(this));\r\n        this.socket.on('receiveAllConfigs', this.handleAllConfigs.bind(this));\r\n    }\r\n\r\n    // ----------------------- SENSOR DATA BROADCAST--------------------- //\r\n    updateRoom(callback) {\r\n        this.socket.emit('room');\r\n        this.canBroadcast = !this.canBroadcast; \r\n        this.sensorDataCallback = callback; \r\n    }\r\n\r\n    broadcastText(text) {\r\n        if (this.canBroadcast) {\r\n            this.socket.emit('sensorData', text); \r\n        }\r\n    }\r\n\r\n    // Fire the sensor data callback registered before. \r\n    handleSensorData(data) {\r\n        this.sensorDataCallback(data);\r\n    }\r\n\r\n    // ----------------------- DATABASE CALLS --------------------- //\r\n    saveUserConfig(payload) {\r\n        this.socket.emit('saveUserConfig', payload); \r\n    }\r\n\r\n    updateUserConfig(payload) {\r\n        this.socket.emit('updateUserConfig', payload);\r\n    }\r\n\r\n    deleteUserConfig(configName) {\r\n        this.socket.emit('deleteUserConfig', configName);\r\n    }\r\n\r\n    // ------------------ LOAD ALL USER CONFIGS ------------------\r\n    requestForConfigs(callback) {\r\n        this.readAllConfigCallback = callback;\r\n        this.socket.emit('requestForConfigs');\r\n    }\r\n\r\n    // Fire the readAllConfigCallback registered before. \r\n    handleAllConfigs(data) {\r\n        console.log('Handle all config: ' + data);\r\n        this.readAllConfigCallback(data); \r\n    }\r\n\r\n    // -------------------- DON'T CHANGE THESE -------------------    \r\n    disconnect() {\r\n        console.log('Socket Server Disconnected.');\r\n    }\r\n\r\n    logTime(data) {\r\n        //console.log('Socket Connection Alive: ' + data);\r\n    }\r\n\r\n}\r\n\r\n// New keyword calls the constructor for the component.\r\nexport default new Websocket();","// Name: ParamConfigs.js\r\n// Author: Amay Kataria. \r\n// Date: 06/17/2021\r\n// Description: Component to handle saving, loading, and updating the sensor params\r\n// to the database. \r\n\r\nimport React from 'react'\r\nimport Radium from 'radium'\r\nimport _ from 'lodash'\r\nimport websocket from './Websocket'\r\n\r\nconst styles = {\r\n  container: {\r\n    position: 'relative',\r\n    marginLeft: '10px',\r\n    marginTop: '20px'\r\n  },\r\n\r\n  configs : {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    alignItems: 'center'\r\n  },\r\n\r\n  textArea: {\r\n    marginLeft: '10px',\r\n    height: '15px'\r\n  },\r\n\r\n  sensor: {\r\n    width: '30px',\r\n    height: '20px',\r\n    marginRight: '10px',\r\n    marginTop: '10px'\r\n  },\r\n\r\n  button: {\r\n    marginTop: '10px',\r\n    marginRight: '10px'\r\n  }\r\n};\r\n\r\nclass ParamConfigs extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      configName: '',\r\n      configs: [],\r\n      selectVal: 'newconfig', // Default value for the select box. \r\n      // TODO: This will be an array off all the sensor values.\r\n      // This component will have to collect these from other components. \r\n      s1: '',\r\n      s2: '',\r\n      s3: ''\r\n    };\r\n\r\n    // Load user configs. \r\n    websocket.requestForConfigs(this.onAllConfigsLoaded.bind(this));\r\n    this.selectRef = React.createRef();\r\n  }\r\n\r\n  render() {\r\n    let o = this.getOptions(); \r\n    return (\r\n      <div style={styles.container}>\r\n        <div style={styles.configs}>\r\n          <select value={this.state.selectVal} ref={this.selectRef} onChange={this.onSelectChange.bind(this)}>{o}</select>\r\n          <textarea\r\n            style={styles.textArea}\r\n            value={this.state.configName}\r\n            onChange={this.onTextAdded.bind(this)}\r\n            placeholder={'Type config name'}\r\n          />\r\n        </div>\r\n        <div style={styles.buttons}>\r\n          <button style={styles.button} onClick={this.onSave.bind(this)}>Save</button>\r\n          <button style={styles.button} onClick={this.onDelete.bind(this)}>Delete</button>\r\n        </div>\r\n        <div style={styles.sensorData}>\r\n          <input onChange={this.s1Change.bind(this)} type=\"text\" style={styles.sensor} value={this.state.s1} />\r\n          <input onChange={this.s2Change.bind(this)} type=\"text\" style={styles.sensor} value={this.state.s2} />\r\n          <input onChange={this.s3Change.bind(this)} type=\"text\" style={styles.sensor} value={this.state.s3} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  onSave() {\r\n    // Current selected value. \r\n    let v = this.selectRef.current.value;\r\n\r\n    // Payload that goes to the database. \r\n    let payload = {}; \r\n    payload['s1'] = this.state.s1; \r\n    payload['s2'] = this.state.s2;\r\n    payload['s3'] = this.state.s3; \r\n    \r\n    // TODO: Check if this name already exists in the config. If it does,\r\n    // Show an alert saying the name already exists... Or some message. \r\n    // somewhere. Maybe I need a message for the database commits. \r\n    // TODO: Show a message for a successful save to the db. \r\n    if (v === 'newconfig') {\r\n      if (this.state.configName.length > 0) {\r\n        payload['name'] = this.state.configName; \r\n        websocket.saveUserConfig(payload); \r\n        let new_configs = this.state.configs;\r\n        new_configs.push(payload);\r\n        this.setState({\r\n          configs: new_configs,\r\n          selectVal: payload['name'],\r\n          configName: ''\r\n        });\r\n      } else {\r\n        // Maybe update the message box with this. \r\n        console.warn('Empty config name.'); \r\n      }\r\n    } else {\r\n      // We are doing an update / ignore the this.state.configName\r\n      payload['name'] = v; // Because value and name are same for entries added to the db.\r\n      websocket.updateUserConfig(payload);\r\n    }\r\n  }\r\n\r\n  onDelete() {\r\n    let configName = this.selectRef.current.value;\r\n    websocket.deleteUserConfig(configName);\r\n\r\n    let newConfigs = this.state.configs; \r\n    // Remove this value from the array. \r\n    _.remove(newConfigs, (c) => {\r\n      return configName === c['name'];\r\n    });\r\n\r\n    this.setState({\r\n      selectVal: 'newconfig',\r\n      s1: '',\r\n      s2: '',\r\n      s3: '',\r\n      configs: newConfigs\r\n    });\r\n\r\n    // Remove the config from this collection. \r\n  }\r\n\r\n  s1Change(e) {\r\n    this.setState({\r\n      s1: e.target.value\r\n    });\r\n  }\r\n  \r\n  s2Change(e) {\r\n    this.setState({\r\n      s2: e.target.value\r\n    });\r\n  }\r\n\r\n  s3Change(e) {\r\n    this.setState({\r\n      s3: e.target.value\r\n    })\r\n  }\r\n\r\n  onSelectChange(e) {\r\n    let v = e.target.value; \r\n\r\n    if (v==='newconfig') {\r\n      this.setState({\r\n        selectVal: v\r\n      });\r\n      return;\r\n    } else {\r\n      let configs = this.state.configs; \r\n      // Update sensor text boxes with \r\n      for (let i = 0; i < configs.length; i++) {\r\n        let name = configs[i]['name'];\r\n        if (name === v) {\r\n          let s1 = configs[i]['s1'];\r\n          let s2 = configs[i]['s2'];\r\n          let s3 = configs[i]['s3'];\r\n          this.setState({\r\n            selectVal: v,\r\n            s1: s1,\r\n            s2: s2,\r\n            s3: s3\r\n          });\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Build this list dynamically. \r\n  // These options should be populated based on the database call. \r\n  getOptions() {\r\n      let options = []; \r\n      // Blank option - always add by default.\r\n      options.push(<option key=\"new\" value=\"newconfig\">newconfig</option>);\r\n\r\n      for (let i = 0; i < this.state.configs.length; i++) {\r\n        let name = this.state.configs[i]['name'];\r\n        options.push(<option key={name} value={name}>{name}</option>);\r\n      }\r\n\r\n      return options; \r\n  }\r\n\r\n  onTextAdded(e) {\r\n    this.setState({\r\n      configName: e.target.value\r\n    });\r\n  }\r\n\r\n  onAllConfigsLoaded(d) {\r\n    console.log('All configs loaded: ');\r\n    this.setState({\r\n      configs: d\r\n    });\r\n  }\r\n}\r\n\r\nexport default Radium(ParamConfigs);\r\n\r\n\r\n    // // Check if this config already exists. \r\n    // let configName = this.state.configName; \r\n    // let found = false; \r\n    // for (let i = 0; i < this.state.configs.length; i++) {\r\n    //   let name = this.state.configs[i]['name'];\r\n    //   if (name === configName) {\r\n    //     found = true; \r\n    //     configName = name; \r\n    //     console.log('Found: ' + name);\r\n    //     break;\r\n    //   }\r\n    // }","// Name: SensorDataStore.js\r\n// Author: Amay Kataria. \r\n// Date: 06/21/2021\r\n// Description: Custom data store is responsible to hold all sensor data for each chip. Component subscribe to this store\r\n// or call its general access methods to get the data. \r\n// State structure. \r\n// [\r\n//     {\r\n//         'f': [xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx],\r\n//         'b': [xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx]\r\n//     },\r\n//     {\r\n//         'f': [xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx],\r\n//         'b': [xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx, xx]\r\n//     }\r\n// ]\r\n\r\nclass SensorDataStore {\r\n    constructor() {\r\n        // Initial state.\r\n        // Array of two objects. Each object holds data from each chip.\r\n        this.state = [{\r\n            'f' : new Array(12).fill(0),\r\n            'b' : new Array(12).fill(0)\r\n        }, {\r\n            'f' : new Array(12).fill(0),\r\n            'b' : new Array(12).fill(0)\r\n        }]; \r\n\r\n        this.listeners = []; \r\n    }\r\n\r\n    // Returns the method to be called to remove itself as listener. \r\n    // Component must call that on unmounting. \r\n    subscribe(listener) {\r\n        this.listeners.push(listener); \r\n        const removeListener = () => {\r\n            this.listeners = this.listeners.filter((s) => listener !== s);\r\n        };\r\n\r\n        return removeListener;\r\n    }\r\n\r\n    // Populates the store. \r\n    setState(chipsetIdx, sensorDataType, sensorData) {\r\n        console.log('Chipset Idx, Data type, sensor Data: ' + chipsetIdx + \", \" + sensorDataType + \", \" + sensorData);\r\n        // Populate the state. \r\n        for (let i = 0; i < sensorData.length; i++) {\r\n            let v = Number(sensorData[i]); \r\n            this.state[chipsetIdx][sensorDataType][i] = v; \r\n        }\r\n\r\n        // Alert all the listeners that new data is coming. \r\n        for (let listener of this.listeners) {\r\n            listener(this.state);\r\n        }\r\n    }\r\n\r\n    getChipData(chipsetIdx) {\r\n        return this.state[chipsetIdx]; \r\n    }\r\n}\r\n\r\nexport default new SensorDataStore(); ","// Name: BLE.js\r\n// Author: Amay Kataria. \r\n// Date: 06/15/2021\r\n// Description: Class responsible for everything related to bluetooth communication with Arduino. \r\n// Receives a callback function in its constructor that gets called after sensor data from the \r\n// Arduino is parsed.\r\n\r\nimport p5ble from 'p5ble'\r\nimport sensorDataStore from '../Stores/SensorDataStore';\r\n\r\n// UART service & characteristic description. \r\nconst serviceUuid = \"6e400001-b5a3-f393-e0a9-e50e24dcca9e\";\r\n// const txCharacteristic = \"6e400002-b5a3-f393-e0a9-e50e24dcca9e\"; // transmit is from the phone's perspective\r\n// const rxCharacteristic = \"6e400003-b5a3-f393-e0a9-e50e24dcca9e\";  // receive is from the phone's perspective\r\n\r\nclass BLE {\r\n  constructor(parseChipsetData) {\r\n    this.myBLE = new p5ble(); \r\n    this.myRxCharacteristic = '';\r\n    this.myTxCharacteristic = '';\r\n    this.isReceivingData = false;\r\n  }\r\n\r\n  connect() {\r\n    // Registered callback to setup service characteristics. \r\n    // Called if the handshake between client and server is successful. \r\n    this.myBLE.connect(serviceUuid, this.handleCharacteristics.bind(this)); \r\n  }\r\n\r\n  disconnect() {\r\n    this.myBLE.disconnect();\r\n  }\r\n\r\n  stop() {\r\n    // Check if bluetooth has been initialized or not. \r\n    if (this.myRxCharacteristic !== '') {\r\n        this.myBLE.stopNotifications(this.myRxCharacteristic);\r\n        this.isReceivingData = false;\r\n    } else {\r\n        console.warn(\"BLE: Not initialized.\"); \r\n    }\r\n  }\r\n\r\n  // Read UART characteristics. \r\n  handleCharacteristics(error, characteristics) {\r\n      if (error) {\r\n          console.log('error: ', error);\r\n          return; \r\n      }\r\n\r\n      this.myTxCharacteristic = characteristics[0]; \r\n      this.myRxCharacteristic = characteristics[1];\r\n      this.myBLE.startNotifications(this.myRxCharacteristic, this.handleIncomingData.bind(this), 'string');\r\n\r\n      this.isReceivingData = true; \r\n      console.log(\"BLE: Successfully paired. Ready to communicate.\")\r\n  }\r\n\r\n  // NT-V,V,V,V,V....V\r\n  // N-sensor index, T-data type, V-line value\r\n  // Parse sensor data based on the above format in which \r\n  // the data is sent from the arduino. \r\n  handleIncomingData(data) {\r\n      // Clean the string with end of line characters. \r\n      data = data.replace(/\\0[\\s\\S]*$/g,'');\r\n      let chipsetIdx; let sensorDataType; let sensorData = []; \r\n      let a = data.split('-');\r\n      chipsetIdx = a[0][0];\r\n      sensorDataType = a[0][1];   \r\n      sensorData = a[1].split(','); \r\n      \r\n      // Debug: Uncomment for raw sensor data received from bluetooth. \r\n      // console.log('Chipset Idx, Data type, sensor Data: ' + chipsetIdx + \", \" + sensorDataType + \", \" + sensorData);\r\n      sensorDataStore.setState(chipsetIdx, sensorDataType, sensorData); \r\n  }\r\n\r\n  // Data buffer must be uint8Array data type of javascript.\r\n  sendBuffer(dataBuffer) {\r\n      if (this.myTxCharacteristic !== '') {\r\n          this.myTxCharacteristic.writeValue(dataBuffer);\r\n          console.log('BLE: Buffer sent: ' + dataBuffer);\r\n      } else {\r\n          console.warn('BLE: Ensure Bluetooth is connected.');\r\n      }\r\n  }\r\n\r\n}\r\n\r\n// New keyword calls the constructor for the component.\r\nexport default new BLE(); ","// Name: Audio.js\r\n// Author: Amay Kataria. \r\n// Date: 06/15/2021\r\n// Description: Class responsible to load all audio files. It's done by instantiating the \r\n// p5 engine in instance mode and calling into through a custom wrapper. \r\n\r\nimport p5 from 'p5'\r\nimport 'p5/lib/addons/p5.sound'\r\n\r\n// Load audio files here. \r\nimport testAudio from '../Audio/testsound.wav'\r\n\r\nlet t1 = 0.1; // attack time in seconds\r\nlet l1 = 0.7; // attack level 0.0 to 1.0\r\nlet t2 = 0.3; // decay time in seconds\r\nlet l2 = 0.1; // decay level  0.0 to 1.0\r\n\r\nvar sketch = (s) => {\r\n    let file; \r\n    let env; \r\n    s.preload = () => {\r\n        file = s.loadSound(testAudio);\r\n    }\r\n    \r\n    s.setup = () => {\r\n        //s.createCanvas(window.innerWidth, window.innerHeight);\r\n        s.noCanvas();\r\n        s.background(0);\r\n        env = new p5.Envelope(t1, l1, t2, l2);\r\n    };\r\n\r\n    s.draw = () => {\r\n        s.noLoop(); \r\n    };\r\n\r\n    s.play = () => {\r\n        file.stop();\r\n        file.loop();\r\n        env.triggerAttack(file);\r\n    }\r\n};\r\n\r\nclass Audio {\r\n    constructor() {\r\n        this.myP5 = new p5(sketch);\r\n    }\r\n\r\n    play() {\r\n        this.myP5.play(); \r\n    }\r\n}\r\n\r\nexport default new Audio();","// Name: Sensor.js\r\n// Author: Amay Kataria. \r\n// Date: 06/21/2021\r\n// Description: Sensor component that references all the attributes like sensor values, calibration parameters,\r\n// audio outputs, etcs. \r\n\r\nimport React from 'react'\r\nimport Radium from 'radium'\r\n\r\nconst styles = {\r\n  container: {\r\n    position: 'relative'\r\n  }\r\n};\r\n\r\nclass Sensor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n\r\n    };\r\n\r\n    // Use the id from the props to create a collection of the sensor lines. \r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n      if (this.props.fVal !== nextProps.fVal || this.props.bVal !== nextProps.bVal) {\r\n          return true; \r\n      } else {\r\n          return false; \r\n      }\r\n  }\r\n\r\n  render() {\r\n    let content = 'Sensor ' + this.props.idx + ' : ' + 'Base Val: ' + this.props.bVal + ', Filtered Val: ' + this.props.fVal; \r\n    return (\r\n      <div style={styles.container}>\r\n        { content }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Radium(Sensor);","// Name: Chipset.js\r\n// Author: Amay Kataria. \r\n// Date: 06/21/2021\r\n// Description: Wrapper class for each chipset. \r\n\r\nimport React from 'react'\r\nimport Radium from 'radium'\r\nimport Sensor from './Sensor'\r\nimport SensorDataStore  from '../Stores/SensorDataStore';\r\n\r\nconst styles = {\r\n  container: {\r\n    position: 'relative',\r\n    marginTop: '20px',\r\n    display: 'flex',\r\n    flexDirection: 'column'\r\n  }\r\n};\r\n\r\nclass Chipset extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Use the chipset id to collect sensorData from the store. \r\n    this.state={\r\n        chipData: SensorDataStore.getChipData(this.props.chipsetId)\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.removeListener = SensorDataStore.subscribe(this.handleNewSensorData.bind(this));\r\n  }\r\n\r\n  render() {\r\n    let sensors = this.getSensors(); \r\n    let content = 'Chipset ' + this.props.chipsetId; \r\n    return (\r\n      <div style={styles.container}>\r\n        { content }\r\n        { sensors } \r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n      this.removeListener();\r\n  }\r\n\r\n  getSensors() {    \r\n    // Gives an array of filtered values. \r\n    let fVals = this.state.chipData['f']; \r\n    let bVals = this.state.chipData['b'];\r\n    let sensors = [];\r\n    for (let i = 0; i < fVals.length; i++) {\r\n        let s = (\r\n            <Sensor \r\n                idx={i}\r\n                fVal={ fVals[i] } \r\n                bVal={ bVals[i] }\r\n                key={ 'key' + i }\r\n            />\r\n        );\r\n\r\n        sensors.push(s); \r\n    }\r\n    return sensors; \r\n  }\r\n\r\n  handleNewSensorData(sensorData) {\r\n    let data = sensorData[this.props.chipsetId];\r\n    this.setState({\r\n        chipData: data\r\n    }); \r\n  }\r\n}\r\n\r\nexport default Radium(Chipset);","// Name: ChipsetCollection.js\r\n// Author: Amay Kataria. \r\n// Date: 06/21/2021\r\n// Description: Very simple wrapper class that holds all chipsets. \r\n\r\nimport React from 'react'\r\nimport Radium from 'radium'\r\nimport Chipset from './Chipset'\r\n\r\nconst styles = {\r\n  container: {\r\n    position: 'relative',\r\n    marginLeft: '10px'\r\n  }\r\n};\r\n\r\nclass ChipsetCollection extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={styles.container}>\r\n          <Chipset key='zero' chipsetId={0} />\r\n          <Chipset key='one' chipsetId={1} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Radium(ChipsetCollection);","// Name: App.js\r\n// Author: Amay Kataria. \r\n// Date: 06/15/2021\r\n// Description: Root class, which is the entry\r\n\r\nimport React from 'react'\r\nimport Radium from 'radium'\r\n\r\nimport ParamConfigs from './ParamConfigs.js'\r\nimport ble from './BLE.js'\r\nimport websocket from './Websocket.js'\r\nimport audio from './Audio.js'\r\nimport ChipsetCollection from './ChipsetCollection'\r\n\r\nconst styles = {\r\n  container: {\r\n    position: 'relative',\r\n    overflow: 'scroll'\r\n  },\r\n\r\n  content: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    width: '400px'\r\n  },\r\n\r\n  inputContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'row'\r\n  },\r\n\r\n  input:{\r\n    width: '200px',\r\n    marginTop: '10px',\r\n    marginLeft: '10px'\r\n  },\r\n\r\n  connected: {\r\n    backgroundColor: 'green'\r\n  }\r\n};\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      isConnected: false,\r\n      receiveVal: 'Receive Text'\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let connectButtonStyle = this.state.isConnected ? [styles.input, styles.connected] : styles.input;\r\n\r\n    return (\r\n      <div style={styles.content}>\r\n          <button onClick={this.onConnect.bind(this)}>BLE Connect</button>\r\n          <button onClick={this.onDisconnect.bind(this)}>BLE Disconnect</button>\r\n          <button onClick={this.onPlay.bind(this)}>Play Some Audio</button>\r\n          <div style={styles.inputContainer}>\r\n            <input onChange={this.onTextAdded.bind(this)} style={styles.input} type='text' placeholder='Transmit text.'></input>\r\n            <div style={styles.input}>{this.state.receiveVal}</div>\r\n          </div>\r\n          <button style={connectButtonStyle} onClick={this.enableConnect.bind(this)}>Enable Connect</button>\r\n          <ParamConfigs />\r\n          <ChipsetCollection />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  onConnect() {\r\n    ble.connect();\r\n  }\r\n\r\n  onDisconnect() {\r\n    ble.disconnect();\r\n  }\r\n\r\n  onPlay() {\r\n    audio.play();\r\n  }\r\n\r\n  enableConnect() {\r\n    this.setState({\r\n      isConnected: !this.state.isConnected\r\n    });\r\n\r\n    websocket.updateRoom(this.onSensorDataReceived.bind(this));\r\n  }\r\n\r\n  onTextAdded(e) {\r\n    let val = e.target.value; \r\n    websocket.broadcastText(val);\r\n  }\r\n\r\n  onSensorDataReceived(data) {\r\n    console.log('Sensor Data received: ' + data);\r\n    this.setState( {\r\n      receiveVal: data\r\n    });\r\n  }\r\n}\r\n\r\nexport default Radium(App);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './font/stylesheet.css';\r\nimport App from './components/App';\r\nimport {StyleRoot} from 'radium'\r\n\r\n// Use StyleRoot to enable keyframes and media queries for Javascript type\r\n// styles with Radium in components. \r\n// Single render function for the entire application. \r\nReactDOM.render(<StyleRoot><App /></StyleRoot>, document.getElementById('root'));","module.exports = __webpack_public_path__ + \"static/media/testsound.1f40cfce.wav\";"],"sourceRoot":""}