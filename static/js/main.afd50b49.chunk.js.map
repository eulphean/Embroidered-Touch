{"version":3,"sources":["components/BLE.js","components/App.js","components/Websocket.js","index.js"],"names":["parseChipsetData","this","myBLE","p5ble","console","log","myRxCharacteristic","myTxCharacteristic","callbackData","isReceivingData","connect","handleCharacteristics","bind","stopNotifications","warn","error","characteristics","startNotifications","handleIncomingData","data","chipsetIdx","sensorDataType","sensorData","a","split","dataBuffer","writeValue","App","socket","on","logTime","disconnect","receiveEntries","receiveDatabaseRentries","printPayload","emit","payload","props","processEntries","order","processDatabase","appendDatabase","state","onClick","ble","React","Component","Radium","ReactDOM","render","document","getElementById"],"mappings":"uRAqFe,M,WAtEb,WAAYA,GAAmB,oBAC7BC,KAAKC,MAAQ,IAAIC,IACjBC,QAAQC,IAAIJ,KAAKC,OACjBD,KAAKK,mBAAqB,GAC1BL,KAAKM,mBAAqB,GAC1BN,KAAKO,aAAeR,EACpBC,KAAKQ,iBAAkB,E,2CAGzB,WAGER,KAAKC,MAAMQ,QAjBK,uCAiBgBT,KAAKU,sBAAsBC,KAAKX,S,kBAGlE,WAEkC,KAA5BA,KAAKK,oBACLL,KAAKC,MAAMW,kBAAkBZ,KAAKK,oBAClCL,KAAKQ,iBAAkB,GAEvBL,QAAQU,KAAK,2B,mCAKnB,SAAsBC,EAAOC,GACrBD,EACAX,QAAQC,IAAI,UAAWU,IAI3Bd,KAAKM,mBAAqBS,EAAgB,GAC1Cf,KAAKK,mBAAqBU,EAAgB,GAC1Cf,KAAKC,MAAMe,mBAAmBhB,KAAKK,mBAAoBL,KAAKiB,mBAAmBN,KAAKX,MAAO,UAE3FA,KAAKQ,iBAAkB,EACvBL,QAAQC,IAAI,sD,gCAOhB,SAAmBc,GACf,IAAIC,EAAgBC,EAAoBC,EACpCC,EAAIJ,EAAKK,MAAM,KACnBJ,EAAaG,EAAE,GAAG,GAClBF,EAAiBE,EAAE,GAAG,GACtBD,EAAaC,EAAE,GAAGC,MAAM,KAKxBvB,KAAKO,aAAaY,EAAYC,EAAgBC,K,wBAIlD,SAAWG,GACyB,KAA5BxB,KAAKM,oBACLN,KAAKM,mBAAmBmB,WAAWD,GACnCrB,QAAQC,IAAI,qBAAuBoB,IAEnCrB,QAAQU,KAAK,2C,MC7DjBa,G,OC2DS,I,WA9DX,aAAc,oB,6CAWd,WACIvB,QAAQC,IAAI,aAGZJ,KAAK2B,OAAOC,GAAG,OAAQ5B,KAAK6B,QAAQlB,KAAKX,OACzCA,KAAK2B,OAAOC,GAAG,aAAc5B,KAAK8B,WAAWnB,KAAKX,OAClDA,KAAK2B,OAAOC,GAAG,uBAAwB5B,KAAK+B,eAAepB,KAAKX,OAChEA,KAAK2B,OAAOC,GAAG,yBAA0B5B,KAAKgC,wBAAwBrB,KAAKX,OAC3EA,KAAK2B,OAAOC,GAAG,eAAgB5B,KAAKiC,aAAatB,KAAKX,S,wBAG1D,WACIG,QAAQC,IAAI,iC,qBAGhB,SAAQc,GACJf,QAAQC,IAAI,4BAA8Bc,K,yBAI9C,WACGlB,KAAK2B,OAAOO,KAAK,uB,4BAIpB,SAAeC,GACXhC,QAAQC,IAAI,oBACZJ,KAAKoC,MAAMC,eAAeF,K,0BAI9B,WACIhC,QAAQC,IAAI,oBAEZJ,KAAK2B,OAAOO,KAAK,eAAgB,CAACI,MAAO,W,qCAG7C,SAAwBH,GACpBhC,QAAQC,IAAI,oBACZJ,KAAKoC,MAAMG,gBAAgBJ,K,0BAG/B,SAAaA,GACThC,QAAQC,IAAI,oBACRJ,KAAKoC,MAAMI,gBACXxC,KAAKoC,MAAMI,eAAeL,O,wDDpDpC,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDK,MAAM,GAFM,E,0CAOnB,WACE,OACE,2DAEI,4BAAQC,QAAS1C,KAAK0C,QAAQ/B,KAAKX,OAAnC,kB,qBAKR,WACE2C,EAAIlC,UACJN,QAAQC,IAAI,qC,GAnBEwC,IAAMC,YAuBTC,cAAOpB,G,QE9BtBqB,IAASC,OAAO,kBAAC,IAAD,KAAW,kBAAC,EAAD,OAAqBC,SAASC,eAAe,U","file":"static/js/main.afd50b49.chunk.js","sourcesContent":["// Name: BLE.js\r\n// Author: Amay Kataria. \r\n// Date: 06/15/2021\r\n// Description: Class responsible for everything related to bluetooth communication with Arduino. \r\n// Receives a callback function in its constructor that gets called after sensor data from the \r\n// Arduino is parsed.\r\n\r\nimport p5ble from 'p5ble'\r\n\r\n// UART service & characteristic description. \r\nconst serviceUuid = \"6e400001-b5a3-f393-e0a9-e50e24dcca9e\";\r\nconst txCharacteristic = \"6e400002-b5a3-f393-e0a9-e50e24dcca9e\"; // transmit is from the phone's perspective\r\nconst rxCharacteristic = \"6e400003-b5a3-f393-e0a9-e50e24dcca9e\";  // receive is from the phone's perspective\r\n\r\nclass BLE {\r\n  constructor(parseChipsetData) {\r\n    this.myBLE = new p5ble(); \r\n    console.log(this.myBLE);\r\n    this.myRxCharacteristic = '';\r\n    this.myTxCharacteristic = '';\r\n    this.callbackData = parseChipsetData;\r\n    this.isReceivingData = false;\r\n  }\r\n\r\n  connect() {\r\n    // Registered callback to setup service characteristics. \r\n    // Called if the handshake between client and server is successful. \r\n    this.myBLE.connect(serviceUuid, this.handleCharacteristics.bind(this)); \r\n  }\r\n\r\n  stop() {\r\n    // Check if bluetooth has been initialized or not. \r\n    if (this.myRxCharacteristic !== '') {\r\n        this.myBLE.stopNotifications(this.myRxCharacteristic);\r\n        this.isReceivingData = false;\r\n    } else {\r\n        console.warn(\"BLE: Not initialized.\"); \r\n    }\r\n  }\r\n\r\n  // Read UART characteristics. \r\n  handleCharacteristics(error, characteristics) {\r\n      if (error) {\r\n          console.log('error: ', error);\r\n          return; \r\n      }\r\n\r\n      this.myTxCharacteristic = characteristics[0]; \r\n      this.myRxCharacteristic = characteristics[1];\r\n      this.myBLE.startNotifications(this.myRxCharacteristic, this.handleIncomingData.bind(this), 'string');\r\n\r\n      this.isReceivingData = true; \r\n      console.log(\"BLE: Successfully paired. Ready to communicate.\")\r\n  }\r\n\r\n  // NT-V,V,V,V,V....V\r\n  // N-sensor index, T-data type, V-line value\r\n  // Parse sensor data based on the above format in which \r\n  // the data is sent from the arduino. \r\n  handleIncomingData(data) {\r\n      let chipsetIdx; let sensorDataType; let sensorData = []; \r\n      let a = data.split('-');\r\n      chipsetIdx = a[0][0];\r\n      sensorDataType = a[0][1];   \r\n      sensorData = a[1].split(','); \r\n      \r\n      // Debug: Uncomment for raw sensor data received from bluetooth. \r\n      // console.log('Chipset Idx, Data type, sensor Data: ' + chipsetIdx + \", \" + sensorDataType + \", \" + sensorData);\r\n\r\n      this.callbackData(chipsetIdx, sensorDataType, sensorData);\r\n  }\r\n\r\n  // Data buffer must be uint88Array data type of javascript.\r\n  sendBuffer(dataBuffer) {\r\n      if (this.myTxCharacteristic !== '') {\r\n          this.myTxCharacteristic.writeValue(dataBuffer);\r\n          console.log('BLE: Buffer sent: ' + dataBuffer);\r\n      } else {\r\n          console.warn('BLE: Ensure Bluetooth is connected.');\r\n      }\r\n  }\r\n\r\n}\r\n\r\n// New keyword calls the constructor for the component.\r\nexport default new BLE(); ","// Name: App.js\r\n// Author: Amay Kataria. \r\n// Date: 06/15/2021\r\n// Description: Root class, which is the entry\r\n\r\nimport React from 'react'\r\nimport Radium from 'radium'\r\n\r\nimport ble from './BLE.js'\r\nimport websocket from './Websocket.js'\r\n\r\nconst styles = {\r\n  container: {\r\n    position: 'relative'\r\n  }\r\n};\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n          Hello I'm a simple content. \r\n          <button onClick={this.onClick.bind(this)}>Connect BLE</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  onClick() {\r\n    ble.connect();\r\n    console.log('Hello click bluetooth connect');\r\n  }\r\n}\r\n\r\nexport default Radium(App);","// Name: Websocket.js\r\n// Author: Amay Kataria. \r\n// Date: 06/15/2021\r\n// Description: Class responsible for communication with the webserver. We use websockets\r\n// technology for this. Here we have the websocket client, which communicates with backend\r\n// server over websockets. \r\n\r\nimport io  from 'socket.io-client'\r\n\r\nconst localhostURL = \"http://localhost:5000/app\";\r\nconst herokuURL = \"https://blooming-refuge-71111.herokuapp.com/app\";\r\nconst siteURL = localhostURL;\r\n\r\nclass Websocket {\r\n    constructor() {\r\n        // this.socket = io(siteURL, { \r\n        //     reconnection: true, \r\n        //     reconnectionDelay: 500, \r\n        //     reconnectionAttempts: Infinity\r\n        // }); \r\n\r\n        // this.socket.once('connect', this.subscribe.bind(this)); \r\n        // console.log(this.socket);\r\n    }\r\n\r\n    subscribe() {\r\n        console.log('Connected');\r\n\r\n        // Subscribe to events. \r\n        this.socket.on('time', this.logTime.bind(this)); \r\n        this.socket.on('disconnect', this.disconnect.bind(this));\r\n        this.socket.on('receiveRandomEntries', this.receiveEntries.bind(this)); \r\n        this.socket.on('receiveDatabaseEntries', this.receiveDatabaseRentries.bind(this)); \r\n        this.socket.on('printPayload', this.printPayload.bind(this));\r\n    }\r\n\r\n    disconnect() {\r\n        console.log('Socket Server Disconnected.')\r\n    }\r\n\r\n    logTime(data) {\r\n        console.log('Socket Connection Alive: ' + data); \r\n    }\r\n\r\n    // Send function and callback function. \r\n    requestData() {\r\n       this.socket.emit('readRandomEntries'); \r\n    }\r\n\r\n\r\n    receiveEntries(payload) {\r\n        console.log('Entries received');\r\n        this.props.processEntries(payload); \r\n    }\r\n\r\n    // Send function and callback function. \r\n    readDatabase() {\r\n        console.log('Request received');\r\n        // Always read in descending order. \r\n        this.socket.emit('readDatabase', {order: 'DESC'}); \r\n    }\r\n\r\n    receiveDatabaseRentries(payload) {\r\n        console.log('Entries received');\r\n        this.props.processDatabase(payload); \r\n    }\r\n\r\n    printPayload(payload) {\r\n        console.log('Payload received'); \r\n        if (this.props.appendDatabase) {\r\n            this.props.appendDatabase(payload);\r\n        }\r\n    }\r\n}\r\n\r\n// New keyword calls the constructor for the component.\r\nexport default new Websocket(); ","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './font/stylesheet.css';\r\nimport App from './components/App';\r\nimport {StyleRoot} from 'radium'\r\n\r\n// Use StyleRoot to enable keyframes and media queries for Javascript type\r\n// styles with Radium in components. \r\n// Single render function for the entire application. \r\nReactDOM.render(<StyleRoot><App /></StyleRoot>, document.getElementById('root'));"],"sourceRoot":""}